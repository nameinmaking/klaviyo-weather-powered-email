{"version":3,"sources":["Config.js","App.js","serviceWorker.js","index.js"],"names":["DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","props","writeUserData","Firebase","database","ref","set","state","console","log","getUserData","on","snapshot","val","setState","selectHandleChange","event","match","target","value","split","city","longitude","latitude","initializeApp","email","userData","emailIsValid","bind","subscribeUser","dropdown","document","getElementById","length","option","defaultOption","createElement","text","add","selectedIndex","i","data","this","className","id","onChange","type","onClick","key","details","push","alert","JSON","stringify","test","React","Component","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yVAYeA,EAXG,CACdC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,gBCuGJC,E,YAzGX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAeVC,cAAgB,WACZC,IAASC,WACJC,IAAI,KACJC,IAAI,EAAKC,OACdC,QAAQC,IAAI,gBApBG,EAuBnBC,YAAc,WACAP,IAASC,WAAWC,IAAI,KAC9BM,GAAG,SAAS,SAAAC,GACZ,IAAML,EAAQK,EAASC,MACvB,EAAKC,SAASP,OA3BH,EAkGnBQ,mBAAqB,SAACC,GAClB,IACIC,EADMD,EAAME,OAAOC,MACPC,MAAM,KACtB,EAAKN,SAAS,CAACO,KAAMJ,EAAM,GAAIK,UAAWL,EAAM,GAAIM,SAAUN,EAAM,MAnGpEd,IAASqB,cAAcjC,GAEvB,EAAKgB,MAAQ,CACTkB,MAAO,GACPJ,KAAM,GACNC,UAAW,GACXC,SAAU,GACVG,SAAU,IAEd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAZN,E,iFAgCf,IAAIE,EAAWC,SAASC,eAAe,YACvCF,EAASG,OAAS,EAElB,IAMIC,EANAC,EAAgBJ,SAASK,cAAc,UAC3CD,EAAcE,KAAO,cAErBP,EAASQ,IAAIH,GACbL,EAASS,cAAgB,EAIzB,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAAKR,OAAQO,KAC7BN,EAASH,SAASK,cAAc,WACzBC,KAAOI,EAAKD,GAAGnB,KACtBa,EAAOf,MAAQ,CAACsB,EAAKD,GAAGnB,KAAMoB,EAAKD,GAAGjB,SAAUkB,EAAKD,GAAGlB,WACxDQ,EAASQ,IAAIJ,GAGjBQ,KAAKhC,gB,+BAIL,OACI,6BAEI,yBAAKiC,UAAU,oBACX,yBAAKA,UAAU,iBACX,4BAAQA,UAAU,+BAA+BC,GAAG,WAC5CC,SAAUH,KAAK3B,mBACfI,MAAOuB,KAAKnC,MAAMc,SAMlC,4BAAQsB,UAAU,mCAAmCG,KAAK,SAClDC,QAASL,KAAKb,eADtB,iB,oHAQJE,SAASC,eAAe,cAAcb,M,wBACtCX,QAAQC,IAAI,Q,mBACNiC,KAAK5B,SAAS,CAACW,MAAOM,SAASC,eAAe,cAAcb,S,cAC9DO,EAAW,IACNsB,IAAMN,KAAKnC,MAAMkB,MACtBwB,EAAU,CACV,KAAQP,KAAKnC,MAAMc,KACnB,UAAaqB,KAAKnC,MAAMe,UACxB,SAAYoB,KAAKnC,MAAMgB,UAG3BG,EAASsB,IAAIE,KAAKD,GAClBE,MAAMC,KAAKC,UAAU3B,I,oBAEfgB,KAAK5B,SAAS,CAACY,SAAUA,K,QAC/BgB,KAAKxC,gB,qFAIAuB,GACT,MAAO,6BAA6B6B,KAAK7B,O,GAjG/B8B,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3C,MACvB,2DCZN4C,IAASC,OAAO,kBAAC,EAAD,MAAS/B,SAASC,eAAe,SD6H3C,kBAAmB+B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b731b691.chunk.js","sourcesContent":["// Your web app's Firebase configuration\nconst DB_CONFIG = {\n    apiKey: \"AIzaSyBpfjGZTlNWo9rK8yA1c4N_Dd9dB-PfRFg\",\n    authDomain: \"klaviyo-weather-app.firebaseapp.com\",\n    databaseURL: \"https://klaviyo-weather-app.firebaseio.com\",\n    projectId: \"klaviyo-weather-app\",\n    storageBucket: \"klaviyo-weather-app.appspot.com\",\n    messagingSenderId: \"1049596033882\",\n    appId: \"1:1049596033882:web:e8a7a4a650e3ec78841163\",\n    measurementId: \"G-LHM0QBSNNB\"\n};\n\nexport default DB_CONFIG;\n","import React from 'react';\nimport data from './cities';\nimport Firebase from 'firebase';\nimport DB_CONFIG from './Config';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        Firebase.initializeApp(DB_CONFIG);\n\n        this.state = {\n            email: \"\",\n            city: \"\",\n            longitude: \"\",\n            latitude: \"\",\n            userData: {}\n        };\n        this.emailIsValid = this.emailIsValid.bind(this);\n        this.subscribeUser = this.subscribeUser.bind(this);\n    }\n\n\n    writeUserData = () => {\n        Firebase.database()\n            .ref(\"/\")\n            .set(this.state);\n        console.log(\"Data Saved!\");\n    };\n\n    getUserData = () => {\n        let ref = Firebase.database().ref(\"/\");\n        ref.on(\"value\", snapshot => {\n            const state = snapshot.val();\n            this.setState(state);\n        });\n    };\n\n    componentDidMount() {\n        let dropdown = document.getElementById('dropdown');\n        dropdown.length = 0;\n\n        let defaultOption = document.createElement('option');\n        defaultOption.text = 'Choose City';\n\n        dropdown.add(defaultOption);\n        dropdown.selectedIndex = 0;\n\n        let option;\n\n        for (let i = 0; i < data.length; i++) {\n            option = document.createElement('option');\n            option.text = data[i].city;\n            option.value = [data[i].city, data[i].latitude, data[i].longitude];\n            dropdown.add(option);\n        }\n\n        this.getUserData();\n    }\n\n    render() {\n        return (\n            <div>\n\n                <div className=\"form-label-group\">\n                    <div className=\"dropdown show\">\n                        <select className=\"form-control form-control-lg\" id=\"dropdown\"\n                                onChange={this.selectHandleChange}\n                                value={this.state.city}\n                        >\n                        </select>\n                    </div>\n                </div>\n\n                <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\"\n                        onClick={this.subscribeUser}> Subscribe\n                </button>\n            </div>\n        );\n    }\n\n    async subscribeUser() {\n        if (document.getElementById(\"inputEmail\").value) {\n            console.log(\"here\");\n            await this.setState({email: document.getElementById(\"inputEmail\").value});\n            let userData = {};\n            userData.key = this.state.email;\n            let details = {\n                \"city\": this.state.city,\n                \"longitude\": this.state.longitude,\n                \"latitude\": this.state.latitude\n            };\n\n            userData.key.push(details);\n            alert(JSON.stringify(userData));\n\n            await this.setState({userData: userData});\n            this.writeUserData();\n        }\n    }\n\n    emailIsValid(email) {\n        return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)\n    }\n\n    selectHandleChange = (event) => {\n        let str = event.target.value;\n        let match = str.split(',');\n        this.setState({city: match[0], longitude: match[1], latitude: match[2]});\n    };\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}