{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar net = require('net');\n\nvar tls = require('tls');\n\nvar url = require('url');\n\nvar Agent = require('agent-base');\n\nvar inherits = require('util').inherits;\n\nvar debug = require('debug')('http-proxy-agent');\n/**\n * Module exports.\n */\n\n\nmodule.exports = HttpProxyAgent;\n/**\n * The `HttpProxyAgent` implements an HTTP Agent subclass that connects to the\n * specified \"HTTP proxy server\" in order to proxy HTTP requests.\n *\n * @api public\n */\n\nfunction HttpProxyAgent(opts) {\n  if (!(this instanceof HttpProxyAgent)) return new HttpProxyAgent(opts);\n  if ('string' == typeof opts) opts = url.parse(opts);\n  if (!opts) throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');\n  debug('creating new HttpProxyAgent instance: %o', opts);\n  Agent.call(this, opts);\n  var proxy = Object.assign({}, opts); // if `true`, then connect to the proxy server over TLS. defaults to `false`.\n\n  this.secureProxy = proxy.protocol ? /^https:?$/i.test(proxy.protocol) : false; // prefer `hostname` over `host`, and set the `port` if needed\n\n  proxy.host = proxy.hostname || proxy.host;\n  proxy.port = +proxy.port || (this.secureProxy ? 443 : 80);\n\n  if (proxy.host && proxy.path) {\n    // if both a `host` and `path` are specified then it's most likely the\n    // result of a `url.parse()` call... we need to remove the `path` portion so\n    // that `net.connect()` doesn't attempt to open that as a unix socket file.\n    delete proxy.path;\n    delete proxy.pathname;\n  }\n\n  this.proxy = proxy;\n}\n\ninherits(HttpProxyAgent, Agent);\n/**\n * Called when the node-core HTTP client library is creating a new HTTP request.\n *\n * @api public\n */\n\nHttpProxyAgent.prototype.callback = function connect(req, opts, fn) {\n  var proxy = this.proxy; // change the `http.ClientRequest` instance's \"path\" field\n  // to the absolute path of the URL that will be requested\n\n  var parsed = url.parse(req.path);\n  if (null == parsed.protocol) parsed.protocol = 'http:';\n  if (null == parsed.hostname) parsed.hostname = opts.hostname || opts.host;\n  if (null == parsed.port) parsed.port = opts.port;\n\n  if (parsed.port == 80) {\n    // if port is 80, then we can remove the port so that the\n    // \":80\" portion is not on the produced URL\n    delete parsed.port;\n  }\n\n  var absolute = url.format(parsed);\n  req.path = absolute; // inject the `Proxy-Authorization` header if necessary\n\n  if (proxy.auth) {\n    req.setHeader('Proxy-Authorization', 'Basic ' + Buffer.from(proxy.auth).toString('base64'));\n  } // create a socket connection to the proxy server\n\n\n  var socket;\n\n  if (this.secureProxy) {\n    socket = tls.connect(proxy);\n  } else {\n    socket = net.connect(proxy);\n  } // at this point, the http ClientRequest's internal `_header` field might have\n  // already been set. If this is the case then we'll need to re-generate the\n  // string since we just changed the `req.path`\n\n\n  if (req._header) {\n    debug('regenerating stored HTTP header string for request');\n    req._header = null;\n\n    req._implicitHeader();\n\n    if (req.output && req.output.length > 0) {\n      // Node < 12\n      debug('patching connection write() output buffer with updated header'); // the _header has already been queued to be written to the socket\n\n      var first = req.output[0];\n      var endOfHeaders = first.indexOf('\\r\\n\\r\\n') + 4;\n      req.output[0] = req._header + first.substring(endOfHeaders);\n      debug('output buffer: %o', req.output);\n    } else if (req.outputData && req.outputData.length > 0) {\n      // Node >= 12\n      debug('patching connection write() output buffer with updated header');\n      var first = req.outputData[0].data; // the _header has already been queued to be written to the socket\n\n      var endOfHeaders = first.indexOf('\\r\\n\\r\\n') + 4;\n      req.outputData[0].data = req._header + first.substring(endOfHeaders);\n      debug('output buffer: %o', req.outputData[0].data);\n    }\n  }\n\n  fn(null, socket);\n};","map":{"version":3,"sources":["/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/http-proxy-agent/index.js"],"names":["net","require","tls","url","Agent","inherits","debug","module","exports","HttpProxyAgent","opts","parse","Error","call","proxy","Object","assign","secureProxy","protocol","test","host","hostname","port","path","pathname","prototype","callback","connect","req","fn","parsed","absolute","format","auth","setHeader","Buffer","from","toString","socket","_header","_implicitHeader","output","length","first","endOfHeaders","indexOf","substring","outputData","data"],"mappings":"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","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar net = require('net');\nvar tls = require('tls');\nvar url = require('url');\nvar Agent = require('agent-base');\nvar inherits = require('util').inherits;\nvar debug = require('debug')('http-proxy-agent');\n\n/**\n * Module exports.\n */\n\nmodule.exports = HttpProxyAgent;\n\n/**\n * The `HttpProxyAgent` implements an HTTP Agent subclass that connects to the\n * specified \"HTTP proxy server\" in order to proxy HTTP requests.\n *\n * @api public\n */\n\nfunction HttpProxyAgent(opts) {\n\tif (!(this instanceof HttpProxyAgent)) return new HttpProxyAgent(opts);\n\tif ('string' == typeof opts) opts = url.parse(opts);\n\tif (!opts)\n\t\tthrow new Error(\n\t\t\t'an HTTP(S) proxy server `host` and `port` must be specified!'\n\t\t);\n\tdebug('creating new HttpProxyAgent instance: %o', opts);\n\tAgent.call(this, opts);\n\n\tvar proxy = Object.assign({}, opts);\n\n\t// if `true`, then connect to the proxy server over TLS. defaults to `false`.\n\tthis.secureProxy = proxy.protocol\n\t\t? /^https:?$/i.test(proxy.protocol)\n\t\t: false;\n\n\t// prefer `hostname` over `host`, and set the `port` if needed\n\tproxy.host = proxy.hostname || proxy.host;\n\tproxy.port = +proxy.port || (this.secureProxy ? 443 : 80);\n\n\tif (proxy.host && proxy.path) {\n\t\t// if both a `host` and `path` are specified then it's most likely the\n\t\t// result of a `url.parse()` call... we need to remove the `path` portion so\n\t\t// that `net.connect()` doesn't attempt to open that as a unix socket file.\n\t\tdelete proxy.path;\n\t\tdelete proxy.pathname;\n\t}\n\n\tthis.proxy = proxy;\n}\ninherits(HttpProxyAgent, Agent);\n\n/**\n * Called when the node-core HTTP client library is creating a new HTTP request.\n *\n * @api public\n */\n\nHttpProxyAgent.prototype.callback = function connect(req, opts, fn) {\n\tvar proxy = this.proxy;\n\n\t// change the `http.ClientRequest` instance's \"path\" field\n\t// to the absolute path of the URL that will be requested\n\tvar parsed = url.parse(req.path);\n\tif (null == parsed.protocol) parsed.protocol = 'http:';\n\tif (null == parsed.hostname) parsed.hostname = opts.hostname || opts.host;\n\tif (null == parsed.port) parsed.port = opts.port;\n\tif (parsed.port == 80) {\n\t\t// if port is 80, then we can remove the port so that the\n\t\t// \":80\" portion is not on the produced URL\n\t\tdelete parsed.port;\n\t}\n\tvar absolute = url.format(parsed);\n\treq.path = absolute;\n\n\t// inject the `Proxy-Authorization` header if necessary\n\tif (proxy.auth) {\n\t\treq.setHeader(\n\t\t\t'Proxy-Authorization',\n\t\t\t'Basic ' + Buffer.from(proxy.auth).toString('base64')\n\t\t);\n\t}\n\n\t// create a socket connection to the proxy server\n\tvar socket;\n\tif (this.secureProxy) {\n\t\tsocket = tls.connect(proxy);\n\t} else {\n\t\tsocket = net.connect(proxy);\n\t}\n\n\t// at this point, the http ClientRequest's internal `_header` field might have\n\t// already been set. If this is the case then we'll need to re-generate the\n\t// string since we just changed the `req.path`\n\tif (req._header) {\n\t\tdebug('regenerating stored HTTP header string for request');\n\t\treq._header = null;\n\t\treq._implicitHeader();\n\t\tif (req.output && req.output.length > 0) {\n\t\t\t// Node < 12\n\t\t\tdebug(\n\t\t\t\t'patching connection write() output buffer with updated header'\n\t\t\t);\n\t\t\t// the _header has already been queued to be written to the socket\n\t\t\tvar first = req.output[0];\n\t\t\tvar endOfHeaders = first.indexOf('\\r\\n\\r\\n') + 4;\n\t\t\treq.output[0] = req._header + first.substring(endOfHeaders);\n\t\t\tdebug('output buffer: %o', req.output);\n\t\t} else if (req.outputData && req.outputData.length > 0) {\n\t\t\t// Node >= 12\n\t\t\tdebug(\n\t\t\t\t'patching connection write() output buffer with updated header'\n\t\t\t);\n\t\t\tvar first = req.outputData[0].data;\n\t\t\t// the _header has already been queued to be written to the socket\n\t\t\tvar endOfHeaders = first.indexOf('\\r\\n\\r\\n') + 4;\n\t\t\treq.outputData[0].data =\n\t\t\t\treq._header + first.substring(endOfHeaders);\n\t\t\tdebug('output buffer: %o', req.outputData[0].data);\n\t\t}\n\t}\n\n\tfn(null, socket);\n};\n"]},"metadata":{},"sourceType":"script"}