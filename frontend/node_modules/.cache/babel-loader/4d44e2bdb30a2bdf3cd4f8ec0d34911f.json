{"ast":null,"code":"/*! firebase-admin v8.8.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n\nvar security_rules_api_client_1 = require(\"./security-rules-api-client\");\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar security_rules_utils_1 = require(\"./security-rules-utils\");\n\nvar RulesetMetadataListImpl =\n/** @class */\nfunction () {\n  function RulesetMetadataListImpl(response) {\n    if (!validator.isNonNullObject(response) || !validator.isArray(response.rulesets)) {\n      throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', \"Invalid ListRulesets response: \" + JSON.stringify(response));\n    }\n\n    this.rulesets = response.rulesets.map(function (rs) {\n      return {\n        name: stripProjectIdPrefix(rs.name),\n        createTime: new Date(rs.createTime).toUTCString()\n      };\n    });\n\n    if (response.nextPageToken) {\n      this.nextPageToken = response.nextPageToken;\n    }\n  }\n\n  return RulesetMetadataListImpl;\n}();\n/**\n * Represents a set of Firebase security rules.\n */\n\n\nvar Ruleset =\n/** @class */\nfunction () {\n  function Ruleset(ruleset) {\n    if (!validator.isNonNullObject(ruleset) || !validator.isNonEmptyString(ruleset.name) || !validator.isNonEmptyString(ruleset.createTime) || !validator.isNonNullObject(ruleset.source)) {\n      throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', \"Invalid Ruleset response: \" + JSON.stringify(ruleset));\n    }\n\n    this.name = stripProjectIdPrefix(ruleset.name);\n    this.createTime = new Date(ruleset.createTime).toUTCString();\n    this.source = ruleset.source.files || [];\n  }\n\n  return Ruleset;\n}();\n\nexports.Ruleset = Ruleset;\n/**\n * SecurityRules service bound to the provided app.\n */\n\nvar SecurityRules =\n/** @class */\nfunction () {\n  /**\n   * @param {object} app The app for this SecurityRules service.\n   * @constructor\n   */\n  function SecurityRules(app) {\n    this.app = app;\n    this.INTERNAL = new SecurityRulesInternals();\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'First argument passed to admin.securityRules() must be a valid Firebase app ' + 'instance.');\n    }\n\n    var projectId = utils.getProjectId(app);\n    this.client = new security_rules_api_client_1.SecurityRulesApiClient(new api_request_1.AuthorizedHttpClient(app), projectId);\n  }\n  /**\n   * Gets the Ruleset identified by the given name. The input name should be the short name string without\n   * the project ID prefix. For example, to retrieve the `projects/project-id/rulesets/my-ruleset`, pass the\n   * short name \"my-ruleset\". Rejects with a `not-found` error if the specified Ruleset cannot be found.\n   *\n   * @param {string} name Name of the Ruleset to retrieve.\n   * @returns {Promise<Ruleset>} A promise that fulfills with the specified Ruleset.\n   */\n\n\n  SecurityRules.prototype.getRuleset = function (name) {\n    return this.client.getRuleset(name).then(function (rulesetResponse) {\n      return new Ruleset(rulesetResponse);\n    });\n  };\n  /**\n   * Gets the Ruleset currently applied to Cloud Firestore. Rejects with a `not-found` error if no Ruleset is\n   * applied on Firestore.\n   *\n   * @returns {Promise<Ruleset>} A promise that fulfills with the Firestore Ruleset.\n   */\n\n\n  SecurityRules.prototype.getFirestoreRuleset = function () {\n    return this.getRulesetForRelease(SecurityRules.CLOUD_FIRESTORE);\n  };\n  /**\n   * Creates a new ruleset from the given source, and applies it to Cloud Firestore.\n   *\n   * @param {string|Buffer} source Rules source to apply.\n   * @returns {Promise<Ruleset>} A promise that fulfills when the ruleset is created and released.\n   */\n\n\n  SecurityRules.prototype.releaseFirestoreRulesetFromSource = function (source) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      var rulesFile = _this.createRulesFileFromSource('firestore.rules', source);\n\n      return _this.createRuleset(rulesFile);\n    }).then(function (ruleset) {\n      return _this.releaseFirestoreRuleset(ruleset).then(function () {\n        return ruleset;\n      });\n    });\n  };\n  /**\n   * Makes the specified ruleset the currently applied ruleset for Cloud Firestore.\n   *\n   * @param {string|RulesetMetadata} ruleset Name of the ruleset to apply or a RulesetMetadata object containing\n   *   the name.\n   * @returns {Promise<void>} A promise that fulfills when the ruleset is released.\n   */\n\n\n  SecurityRules.prototype.releaseFirestoreRuleset = function (ruleset) {\n    return this.releaseRuleset(ruleset, SecurityRules.CLOUD_FIRESTORE);\n  };\n  /**\n   * Gets the Ruleset currently applied to a Cloud Storage bucket. Rejects with a `not-found` error if no Ruleset is\n   * applied on the bucket.\n   *\n   * @param {string=} bucket Optional name of the Cloud Storage bucket to be retrieved. If not specified,\n   *   retrieves the ruleset applied on the default bucket configured via `AppOptions`.\n   * @returns {Promise<Ruleset>} A promise that fulfills with the Cloud Storage Ruleset.\n   */\n\n\n  SecurityRules.prototype.getStorageRuleset = function (bucket) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.getBucketName(bucket);\n    }).then(function (bucketName) {\n      return _this.getRulesetForRelease(SecurityRules.FIREBASE_STORAGE + \"/\" + bucketName);\n    });\n  };\n  /**\n   * Creates a new ruleset from the given source, and applies it to a Cloud Storage bucket.\n   *\n   * @param {string|Buffer} source Rules source to apply.\n   * @param {string=} bucket Optional name of the Cloud Storage bucket to apply the rules on. If not specified,\n   *   applies the ruleset on the default bucket configured via `AppOptions`.\n   * @returns {Promise<Ruleset>} A promise that fulfills when the ruleset is created and released.\n   */\n\n\n  SecurityRules.prototype.releaseStorageRulesetFromSource = function (source, bucket) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      // Bucket name is not required until the last step. But since there's a createRuleset step\n      // before then, make sure to run this check and fail early if the bucket name is invalid.\n      _this.getBucketName(bucket);\n\n      var rulesFile = _this.createRulesFileFromSource('storage.rules', source);\n\n      return _this.createRuleset(rulesFile);\n    }).then(function (ruleset) {\n      return _this.releaseStorageRuleset(ruleset, bucket).then(function () {\n        return ruleset;\n      });\n    });\n  };\n  /**\n   * Makes the specified ruleset the currently applied ruleset for a Cloud Storage bucket.\n   *\n   * @param {string|RulesetMetadata} ruleset Name of the ruleset to apply or a RulesetMetadata object containing\n   *   the name.\n   * @param {string=} bucket Optional name of the Cloud Storage bucket to apply the rules on. If not specified,\n   *   applies the ruleset on the default bucket configured via `AppOptions`.\n   * @returns {Promise<void>} A promise that fulfills when the ruleset is released.\n   */\n\n\n  SecurityRules.prototype.releaseStorageRuleset = function (ruleset, bucket) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.getBucketName(bucket);\n    }).then(function (bucketName) {\n      return _this.releaseRuleset(ruleset, SecurityRules.FIREBASE_STORAGE + \"/\" + bucketName);\n    });\n  };\n  /**\n   * Creates a `RulesFile` with the given name and source. Throws if any of the arguments are invalid. This is a\n   * local operation, and does not involve any network API calls.\n   *\n   * @param {string} name Name to assign to the rules file.\n   * @param {string|Buffer} source Contents of the rules file.\n   * @returns {RulesFile} A new rules file instance.\n   */\n\n\n  SecurityRules.prototype.createRulesFileFromSource = function (name, source) {\n    if (!validator.isNonEmptyString(name)) {\n      throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Name must be a non-empty string.');\n    }\n\n    var content;\n\n    if (validator.isNonEmptyString(source)) {\n      content = source;\n    } else if (validator.isBuffer(source)) {\n      content = source.toString('utf-8');\n    } else {\n      throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Source must be a non-empty string or a Buffer.');\n    }\n\n    return {\n      name: name,\n      content: content\n    };\n  };\n  /**\n   * Creates a new `Ruleset` from the given `RulesFile`.\n   *\n   * @param {RulesFile} file Rules file to include in the new Ruleset.\n   * @returns {Promise<Ruleset>} A promise that fulfills with the newly created Ruleset.\n   */\n\n\n  SecurityRules.prototype.createRuleset = function (file) {\n    var ruleset = {\n      source: {\n        files: [file]\n      }\n    };\n    return this.client.createRuleset(ruleset).then(function (rulesetResponse) {\n      return new Ruleset(rulesetResponse);\n    });\n  };\n  /**\n   * Deletes the Ruleset identified by the given name. The input name should be the short name string without\n   * the project ID prefix. For example, to delete the `projects/project-id/rulesets/my-ruleset`, pass the\n   * short name \"my-ruleset\". Rejects with a `not-found` error if the specified Ruleset cannot be found.\n   *\n   * @param {string} name Name of the Ruleset to delete.\n   * @returns {Promise<Ruleset>} A promise that fulfills when the Ruleset is deleted.\n   */\n\n\n  SecurityRules.prototype.deleteRuleset = function (name) {\n    return this.client.deleteRuleset(name);\n  };\n  /**\n   * Retrieves a page of rulesets.\n   *\n   * @param {number=} pageSize The page size, 100 if undefined. This is also the maximum allowed limit.\n   * @param {string=} nextPageToken The next page token. If not specified, returns rulesets starting\n   *   without any offset.\n   * @returns {Promise<RulesetMetadataList>} A promise that fulfills a page of rulesets.\n   */\n\n\n  SecurityRules.prototype.listRulesetMetadata = function (pageSize, nextPageToken) {\n    if (pageSize === void 0) {\n      pageSize = 100;\n    }\n\n    return this.client.listRulesets(pageSize, nextPageToken).then(function (response) {\n      return new RulesetMetadataListImpl(response);\n    });\n  };\n\n  SecurityRules.prototype.getRulesetForRelease = function (releaseName) {\n    var _this = this;\n\n    return this.client.getRelease(releaseName).then(function (release) {\n      var rulesetName = release.rulesetName;\n\n      if (!validator.isNonEmptyString(rulesetName)) {\n        throw new security_rules_utils_1.FirebaseSecurityRulesError('not-found', \"Ruleset name not found for \" + releaseName + \".\");\n      }\n\n      return _this.getRuleset(stripProjectIdPrefix(rulesetName));\n    });\n  };\n\n  SecurityRules.prototype.releaseRuleset = function (ruleset, releaseName) {\n    if (!validator.isNonEmptyString(ruleset) && (!validator.isNonNullObject(ruleset) || !validator.isNonEmptyString(ruleset.name))) {\n      var err = new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'ruleset must be a non-empty name or a RulesetMetadata object.');\n      return Promise.reject(err);\n    }\n\n    var rulesetName = validator.isString(ruleset) ? ruleset : ruleset.name;\n    return this.client.updateRelease(releaseName, rulesetName).then(function () {\n      return;\n    });\n  };\n\n  SecurityRules.prototype.getBucketName = function (bucket) {\n    var bucketName = typeof bucket !== 'undefined' ? bucket : this.app.options.storageBucket;\n\n    if (!validator.isNonEmptyString(bucketName)) {\n      throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Bucket name not specified or invalid. Specify a default bucket name via the ' + 'storageBucket option when initializing the app, or specify the bucket name ' + 'explicitly when calling the rules API.');\n    }\n\n    return bucketName;\n  };\n\n  SecurityRules.CLOUD_FIRESTORE = 'cloud.firestore';\n  SecurityRules.FIREBASE_STORAGE = 'firebase.storage';\n  return SecurityRules;\n}();\n\nexports.SecurityRules = SecurityRules;\n\nvar SecurityRulesInternals =\n/** @class */\nfunction () {\n  function SecurityRulesInternals() {}\n\n  SecurityRulesInternals.prototype.delete = function () {\n    return Promise.resolve();\n  };\n\n  return SecurityRulesInternals;\n}();\n\nfunction stripProjectIdPrefix(name) {\n  return name.split('/').pop();\n}","map":{"version":3,"sources":["/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/firebase-admin/lib/security-rules/security-rules.js"],"names":["Object","defineProperty","exports","value","utils","require","validator","security_rules_api_client_1","api_request_1","security_rules_utils_1","RulesetMetadataListImpl","response","isNonNullObject","isArray","rulesets","FirebaseSecurityRulesError","JSON","stringify","map","rs","name","stripProjectIdPrefix","createTime","Date","toUTCString","nextPageToken","Ruleset","ruleset","isNonEmptyString","source","files","SecurityRules","app","INTERNAL","SecurityRulesInternals","projectId","getProjectId","client","SecurityRulesApiClient","AuthorizedHttpClient","prototype","getRuleset","then","rulesetResponse","getFirestoreRuleset","getRulesetForRelease","CLOUD_FIRESTORE","releaseFirestoreRulesetFromSource","_this","Promise","resolve","rulesFile","createRulesFileFromSource","createRuleset","releaseFirestoreRuleset","releaseRuleset","getStorageRuleset","bucket","getBucketName","bucketName","FIREBASE_STORAGE","releaseStorageRulesetFromSource","releaseStorageRuleset","content","isBuffer","toString","file","deleteRuleset","listRulesetMetadata","pageSize","listRulesets","releaseName","getRelease","release","rulesetName","err","reject","isString","updateRelease","options","storageBucket","delete","split","pop"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.8.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils = require(\"../utils/index\");\nvar validator = require(\"../utils/validator\");\nvar security_rules_api_client_1 = require(\"./security-rules-api-client\");\nvar api_request_1 = require(\"../utils/api-request\");\nvar security_rules_utils_1 = require(\"./security-rules-utils\");\nvar RulesetMetadataListImpl = /** @class */ (function () {\n    function RulesetMetadataListImpl(response) {\n        if (!validator.isNonNullObject(response) || !validator.isArray(response.rulesets)) {\n            throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', \"Invalid ListRulesets response: \" + JSON.stringify(response));\n        }\n        this.rulesets = response.rulesets.map(function (rs) {\n            return {\n                name: stripProjectIdPrefix(rs.name),\n                createTime: new Date(rs.createTime).toUTCString(),\n            };\n        });\n        if (response.nextPageToken) {\n            this.nextPageToken = response.nextPageToken;\n        }\n    }\n    return RulesetMetadataListImpl;\n}());\n/**\n * Represents a set of Firebase security rules.\n */\nvar Ruleset = /** @class */ (function () {\n    function Ruleset(ruleset) {\n        if (!validator.isNonNullObject(ruleset) ||\n            !validator.isNonEmptyString(ruleset.name) ||\n            !validator.isNonEmptyString(ruleset.createTime) ||\n            !validator.isNonNullObject(ruleset.source)) {\n            throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', \"Invalid Ruleset response: \" + JSON.stringify(ruleset));\n        }\n        this.name = stripProjectIdPrefix(ruleset.name);\n        this.createTime = new Date(ruleset.createTime).toUTCString();\n        this.source = ruleset.source.files || [];\n    }\n    return Ruleset;\n}());\nexports.Ruleset = Ruleset;\n/**\n * SecurityRules service bound to the provided app.\n */\nvar SecurityRules = /** @class */ (function () {\n    /**\n     * @param {object} app The app for this SecurityRules service.\n     * @constructor\n     */\n    function SecurityRules(app) {\n        this.app = app;\n        this.INTERNAL = new SecurityRulesInternals();\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'First argument passed to admin.securityRules() must be a valid Firebase app '\n                + 'instance.');\n        }\n        var projectId = utils.getProjectId(app);\n        this.client = new security_rules_api_client_1.SecurityRulesApiClient(new api_request_1.AuthorizedHttpClient(app), projectId);\n    }\n    /**\n     * Gets the Ruleset identified by the given name. The input name should be the short name string without\n     * the project ID prefix. For example, to retrieve the `projects/project-id/rulesets/my-ruleset`, pass the\n     * short name \"my-ruleset\". Rejects with a `not-found` error if the specified Ruleset cannot be found.\n     *\n     * @param {string} name Name of the Ruleset to retrieve.\n     * @returns {Promise<Ruleset>} A promise that fulfills with the specified Ruleset.\n     */\n    SecurityRules.prototype.getRuleset = function (name) {\n        return this.client.getRuleset(name)\n            .then(function (rulesetResponse) {\n            return new Ruleset(rulesetResponse);\n        });\n    };\n    /**\n     * Gets the Ruleset currently applied to Cloud Firestore. Rejects with a `not-found` error if no Ruleset is\n     * applied on Firestore.\n     *\n     * @returns {Promise<Ruleset>} A promise that fulfills with the Firestore Ruleset.\n     */\n    SecurityRules.prototype.getFirestoreRuleset = function () {\n        return this.getRulesetForRelease(SecurityRules.CLOUD_FIRESTORE);\n    };\n    /**\n     * Creates a new ruleset from the given source, and applies it to Cloud Firestore.\n     *\n     * @param {string|Buffer} source Rules source to apply.\n     * @returns {Promise<Ruleset>} A promise that fulfills when the ruleset is created and released.\n     */\n    SecurityRules.prototype.releaseFirestoreRulesetFromSource = function (source) {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            var rulesFile = _this.createRulesFileFromSource('firestore.rules', source);\n            return _this.createRuleset(rulesFile);\n        })\n            .then(function (ruleset) {\n            return _this.releaseFirestoreRuleset(ruleset)\n                .then(function () {\n                return ruleset;\n            });\n        });\n    };\n    /**\n     * Makes the specified ruleset the currently applied ruleset for Cloud Firestore.\n     *\n     * @param {string|RulesetMetadata} ruleset Name of the ruleset to apply or a RulesetMetadata object containing\n     *   the name.\n     * @returns {Promise<void>} A promise that fulfills when the ruleset is released.\n     */\n    SecurityRules.prototype.releaseFirestoreRuleset = function (ruleset) {\n        return this.releaseRuleset(ruleset, SecurityRules.CLOUD_FIRESTORE);\n    };\n    /**\n     * Gets the Ruleset currently applied to a Cloud Storage bucket. Rejects with a `not-found` error if no Ruleset is\n     * applied on the bucket.\n     *\n     * @param {string=} bucket Optional name of the Cloud Storage bucket to be retrieved. If not specified,\n     *   retrieves the ruleset applied on the default bucket configured via `AppOptions`.\n     * @returns {Promise<Ruleset>} A promise that fulfills with the Cloud Storage Ruleset.\n     */\n    SecurityRules.prototype.getStorageRuleset = function (bucket) {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.getBucketName(bucket);\n        })\n            .then(function (bucketName) {\n            return _this.getRulesetForRelease(SecurityRules.FIREBASE_STORAGE + \"/\" + bucketName);\n        });\n    };\n    /**\n     * Creates a new ruleset from the given source, and applies it to a Cloud Storage bucket.\n     *\n     * @param {string|Buffer} source Rules source to apply.\n     * @param {string=} bucket Optional name of the Cloud Storage bucket to apply the rules on. If not specified,\n     *   applies the ruleset on the default bucket configured via `AppOptions`.\n     * @returns {Promise<Ruleset>} A promise that fulfills when the ruleset is created and released.\n     */\n    SecurityRules.prototype.releaseStorageRulesetFromSource = function (source, bucket) {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            // Bucket name is not required until the last step. But since there's a createRuleset step\n            // before then, make sure to run this check and fail early if the bucket name is invalid.\n            _this.getBucketName(bucket);\n            var rulesFile = _this.createRulesFileFromSource('storage.rules', source);\n            return _this.createRuleset(rulesFile);\n        })\n            .then(function (ruleset) {\n            return _this.releaseStorageRuleset(ruleset, bucket)\n                .then(function () {\n                return ruleset;\n            });\n        });\n    };\n    /**\n     * Makes the specified ruleset the currently applied ruleset for a Cloud Storage bucket.\n     *\n     * @param {string|RulesetMetadata} ruleset Name of the ruleset to apply or a RulesetMetadata object containing\n     *   the name.\n     * @param {string=} bucket Optional name of the Cloud Storage bucket to apply the rules on. If not specified,\n     *   applies the ruleset on the default bucket configured via `AppOptions`.\n     * @returns {Promise<void>} A promise that fulfills when the ruleset is released.\n     */\n    SecurityRules.prototype.releaseStorageRuleset = function (ruleset, bucket) {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.getBucketName(bucket);\n        })\n            .then(function (bucketName) {\n            return _this.releaseRuleset(ruleset, SecurityRules.FIREBASE_STORAGE + \"/\" + bucketName);\n        });\n    };\n    /**\n     * Creates a `RulesFile` with the given name and source. Throws if any of the arguments are invalid. This is a\n     * local operation, and does not involve any network API calls.\n     *\n     * @param {string} name Name to assign to the rules file.\n     * @param {string|Buffer} source Contents of the rules file.\n     * @returns {RulesFile} A new rules file instance.\n     */\n    SecurityRules.prototype.createRulesFileFromSource = function (name, source) {\n        if (!validator.isNonEmptyString(name)) {\n            throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Name must be a non-empty string.');\n        }\n        var content;\n        if (validator.isNonEmptyString(source)) {\n            content = source;\n        }\n        else if (validator.isBuffer(source)) {\n            content = source.toString('utf-8');\n        }\n        else {\n            throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Source must be a non-empty string or a Buffer.');\n        }\n        return {\n            name: name,\n            content: content,\n        };\n    };\n    /**\n     * Creates a new `Ruleset` from the given `RulesFile`.\n     *\n     * @param {RulesFile} file Rules file to include in the new Ruleset.\n     * @returns {Promise<Ruleset>} A promise that fulfills with the newly created Ruleset.\n     */\n    SecurityRules.prototype.createRuleset = function (file) {\n        var ruleset = {\n            source: {\n                files: [file],\n            },\n        };\n        return this.client.createRuleset(ruleset)\n            .then(function (rulesetResponse) {\n            return new Ruleset(rulesetResponse);\n        });\n    };\n    /**\n     * Deletes the Ruleset identified by the given name. The input name should be the short name string without\n     * the project ID prefix. For example, to delete the `projects/project-id/rulesets/my-ruleset`, pass the\n     * short name \"my-ruleset\". Rejects with a `not-found` error if the specified Ruleset cannot be found.\n     *\n     * @param {string} name Name of the Ruleset to delete.\n     * @returns {Promise<Ruleset>} A promise that fulfills when the Ruleset is deleted.\n     */\n    SecurityRules.prototype.deleteRuleset = function (name) {\n        return this.client.deleteRuleset(name);\n    };\n    /**\n     * Retrieves a page of rulesets.\n     *\n     * @param {number=} pageSize The page size, 100 if undefined. This is also the maximum allowed limit.\n     * @param {string=} nextPageToken The next page token. If not specified, returns rulesets starting\n     *   without any offset.\n     * @returns {Promise<RulesetMetadataList>} A promise that fulfills a page of rulesets.\n     */\n    SecurityRules.prototype.listRulesetMetadata = function (pageSize, nextPageToken) {\n        if (pageSize === void 0) { pageSize = 100; }\n        return this.client.listRulesets(pageSize, nextPageToken)\n            .then(function (response) {\n            return new RulesetMetadataListImpl(response);\n        });\n    };\n    SecurityRules.prototype.getRulesetForRelease = function (releaseName) {\n        var _this = this;\n        return this.client.getRelease(releaseName)\n            .then(function (release) {\n            var rulesetName = release.rulesetName;\n            if (!validator.isNonEmptyString(rulesetName)) {\n                throw new security_rules_utils_1.FirebaseSecurityRulesError('not-found', \"Ruleset name not found for \" + releaseName + \".\");\n            }\n            return _this.getRuleset(stripProjectIdPrefix(rulesetName));\n        });\n    };\n    SecurityRules.prototype.releaseRuleset = function (ruleset, releaseName) {\n        if (!validator.isNonEmptyString(ruleset) &&\n            (!validator.isNonNullObject(ruleset) || !validator.isNonEmptyString(ruleset.name))) {\n            var err = new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'ruleset must be a non-empty name or a RulesetMetadata object.');\n            return Promise.reject(err);\n        }\n        var rulesetName = validator.isString(ruleset) ? ruleset : ruleset.name;\n        return this.client.updateRelease(releaseName, rulesetName)\n            .then(function () {\n            return;\n        });\n    };\n    SecurityRules.prototype.getBucketName = function (bucket) {\n        var bucketName = (typeof bucket !== 'undefined') ? bucket : this.app.options.storageBucket;\n        if (!validator.isNonEmptyString(bucketName)) {\n            throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Bucket name not specified or invalid. Specify a default bucket name via the ' +\n                'storageBucket option when initializing the app, or specify the bucket name ' +\n                'explicitly when calling the rules API.');\n        }\n        return bucketName;\n    };\n    SecurityRules.CLOUD_FIRESTORE = 'cloud.firestore';\n    SecurityRules.FIREBASE_STORAGE = 'firebase.storage';\n    return SecurityRules;\n}());\nexports.SecurityRules = SecurityRules;\nvar SecurityRulesInternals = /** @class */ (function () {\n    function SecurityRulesInternals() {\n    }\n    SecurityRulesInternals.prototype.delete = function () {\n        return Promise.resolve();\n    };\n    return SecurityRulesInternals;\n}());\nfunction stripProjectIdPrefix(name) {\n    return name.split('/').pop();\n}\n"]},"metadata":{},"sourceType":"script"}