{"ast":null,"code":"/*! firebase-admin v8.8.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../utils/error\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n\nvar android_app_1 = require(\"./android-app\");\n\nvar ios_app_1 = require(\"./ios-app\");\n\nvar project_management_api_request_1 = require(\"./project-management-api-request\");\n\nvar app_metadata_1 = require(\"./app-metadata\");\n/**\n * Internals of a Project Management instance.\n */\n\n\nvar ProjectManagementInternals =\n/** @class */\nfunction () {\n  function ProjectManagementInternals() {}\n  /**\n   * Deletes the service and its associated resources.\n   *\n   * @return {Promise<void>} An empty Promise that will be resolved when the service is deleted.\n   */\n\n\n  ProjectManagementInternals.prototype.delete = function () {\n    // There are no resources to clean up.\n    return Promise.resolve();\n  };\n\n  return ProjectManagementInternals;\n}();\n/**\n * ProjectManagement service bound to the provided app.\n */\n\n\nvar ProjectManagement =\n/** @class */\nfunction () {\n  /**\n   * @param {object} app The app for this ProjectManagement service.\n   * @constructor\n   */\n  function ProjectManagement(app) {\n    this.app = app;\n    this.INTERNAL = new ProjectManagementInternals();\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'First argument passed to admin.projectManagement() must be a valid Firebase app ' + 'instance.');\n    } // Assert that a specific project ID was provided within the app.\n\n\n    this.projectId = utils.getProjectId(app);\n\n    if (!validator.isNonEmptyString(this.projectId)) {\n      throw new error_1.FirebaseProjectManagementError('invalid-project-id', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n    }\n\n    this.resourceName = \"projects/\" + this.projectId;\n    this.requestHandler = new project_management_api_request_1.ProjectManagementRequestHandler(app);\n  }\n  /**\n   * Lists up to 100 Firebase Android apps associated with this Firebase project.\n   */\n\n\n  ProjectManagement.prototype.listAndroidApps = function () {\n    return this.listPlatformApps('android', 'listAndroidApps()');\n  };\n  /**\n   * Lists up to 100 Firebase iOS apps associated with this Firebase project.\n   */\n\n\n  ProjectManagement.prototype.listIosApps = function () {\n    return this.listPlatformApps('ios', 'listIosApps()');\n  };\n  /**\n   * Returns an AndroidApp object for the given appId. No RPC is made.\n   */\n\n\n  ProjectManagement.prototype.androidApp = function (appId) {\n    return new android_app_1.AndroidApp(appId, this.requestHandler);\n  };\n  /**\n   * Returns an IosApp object for the given appId. No RPC is made.\n   */\n\n\n  ProjectManagement.prototype.iosApp = function (appId) {\n    return new ios_app_1.IosApp(appId, this.requestHandler);\n  };\n  /**\n   * Returns a ShaCertificate object for the given shaHash. No RPC is made.\n   */\n\n\n  ProjectManagement.prototype.shaCertificate = function (shaHash) {\n    return new android_app_1.ShaCertificate(shaHash);\n  };\n  /**\n   * Creates a new Firebase Android app, associated with this Firebase project.\n   */\n\n\n  ProjectManagement.prototype.createAndroidApp = function (packageName, displayName) {\n    var _this = this;\n\n    return this.requestHandler.createAndroidApp(this.resourceName, packageName, displayName).then(function (responseData) {\n      project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createAndroidApp()\\'s responseData must be a non-null object.');\n      project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(responseData.appId), responseData, \"\\\"responseData.appId\\\" field must be present in createAndroidApp()'s response data.\");\n      return new android_app_1.AndroidApp(responseData.appId, _this.requestHandler);\n    });\n  };\n  /**\n   * Creates a new Firebase iOS app, associated with this Firebase project.\n   */\n\n\n  ProjectManagement.prototype.createIosApp = function (bundleId, displayName) {\n    var _this = this;\n\n    return this.requestHandler.createIosApp(this.resourceName, bundleId, displayName).then(function (responseData) {\n      project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createIosApp()\\'s responseData must be a non-null object.');\n      project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(responseData.appId), responseData, \"\\\"responseData.appId\\\" field must be present in createIosApp()'s response data.\");\n      return new ios_app_1.IosApp(responseData.appId, _this.requestHandler);\n    });\n  };\n  /**\n   * Lists up to 100 Firebase apps associated with this Firebase project.\n   */\n\n\n  ProjectManagement.prototype.listAppMetadata = function () {\n    var _this = this;\n\n    return this.requestHandler.listAppMetadata(this.resourceName).then(function (responseData) {\n      return _this.transformResponseToAppMetadata(responseData);\n    });\n  };\n  /**\n   * Update display name of the project\n   */\n\n\n  ProjectManagement.prototype.setDisplayName = function (newDisplayName) {\n    return this.requestHandler.setDisplayName(this.resourceName, newDisplayName);\n  };\n\n  ProjectManagement.prototype.transformResponseToAppMetadata = function (responseData) {\n    var _this = this;\n\n    this.assertListAppsResponseData(responseData, 'listAppMetadata()');\n\n    if (!responseData.apps) {\n      return [];\n    }\n\n    return responseData.apps.map(function (appJson) {\n      project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(appJson.appId), responseData, \"\\\"apps[].appId\\\" field must be present in the listAppMetadata() response data.\");\n      project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(appJson.platform), responseData, \"\\\"apps[].platform\\\" field must be present in the listAppMetadata() response data.\");\n      var metadata = {\n        appId: appJson.appId,\n        platform: app_metadata_1.AppPlatform[appJson.platform] || app_metadata_1.AppPlatform.PLATFORM_UNKNOWN,\n        projectId: _this.projectId,\n        resourceName: appJson.name\n      };\n\n      if (appJson.displayName) {\n        metadata.displayName = appJson.displayName;\n      }\n\n      return metadata;\n    });\n  };\n  /**\n   * Lists up to 100 Firebase apps for a specified platform, associated with this Firebase project.\n   */\n\n\n  ProjectManagement.prototype.listPlatformApps = function (platform, callerName) {\n    var _this = this;\n\n    var listPromise = platform === 'android' ? this.requestHandler.listAndroidApps(this.resourceName) : this.requestHandler.listIosApps(this.resourceName);\n    return listPromise.then(function (responseData) {\n      _this.assertListAppsResponseData(responseData, callerName);\n\n      if (!responseData.apps) {\n        return [];\n      }\n\n      return responseData.apps.map(function (appJson) {\n        project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(appJson.appId), responseData, \"\\\"apps[].appId\\\" field must be present in the \" + callerName + \" response data.\");\n\n        if (platform === 'android') {\n          return new android_app_1.AndroidApp(appJson.appId, _this.requestHandler);\n        } else {\n          return new ios_app_1.IosApp(appJson.appId, _this.requestHandler);\n        }\n      });\n    });\n  };\n\n  ProjectManagement.prototype.assertListAppsResponseData = function (responseData, callerName) {\n    project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, callerName + \"'s responseData must be a non-null object.\");\n\n    if (responseData.apps) {\n      project_management_api_request_1.assertServerResponse(validator.isArray(responseData.apps), responseData, \"\\\"apps\\\" field must be present in the \" + callerName + \" response data.\");\n    }\n  };\n\n  return ProjectManagement;\n}();\n\nexports.ProjectManagement = ProjectManagement;","map":{"version":3,"sources":["/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/firebase-admin/lib/project-management/project-management.js"],"names":["Object","defineProperty","exports","value","error_1","require","utils","validator","android_app_1","ios_app_1","project_management_api_request_1","app_metadata_1","ProjectManagementInternals","prototype","delete","Promise","resolve","ProjectManagement","app","INTERNAL","isNonNullObject","FirebaseProjectManagementError","projectId","getProjectId","isNonEmptyString","resourceName","requestHandler","ProjectManagementRequestHandler","listAndroidApps","listPlatformApps","listIosApps","androidApp","appId","AndroidApp","iosApp","IosApp","shaCertificate","shaHash","ShaCertificate","createAndroidApp","packageName","displayName","_this","then","responseData","assertServerResponse","createIosApp","bundleId","listAppMetadata","transformResponseToAppMetadata","setDisplayName","newDisplayName","assertListAppsResponseData","apps","map","appJson","platform","metadata","AppPlatform","PLATFORM_UNKNOWN","name","callerName","listPromise","isArray"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.8.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar error_1 = require(\"../utils/error\");\nvar utils = require(\"../utils/index\");\nvar validator = require(\"../utils/validator\");\nvar android_app_1 = require(\"./android-app\");\nvar ios_app_1 = require(\"./ios-app\");\nvar project_management_api_request_1 = require(\"./project-management-api-request\");\nvar app_metadata_1 = require(\"./app-metadata\");\n/**\n * Internals of a Project Management instance.\n */\nvar ProjectManagementInternals = /** @class */ (function () {\n    function ProjectManagementInternals() {\n    }\n    /**\n     * Deletes the service and its associated resources.\n     *\n     * @return {Promise<void>} An empty Promise that will be resolved when the service is deleted.\n     */\n    ProjectManagementInternals.prototype.delete = function () {\n        // There are no resources to clean up.\n        return Promise.resolve();\n    };\n    return ProjectManagementInternals;\n}());\n/**\n * ProjectManagement service bound to the provided app.\n */\nvar ProjectManagement = /** @class */ (function () {\n    /**\n     * @param {object} app The app for this ProjectManagement service.\n     * @constructor\n     */\n    function ProjectManagement(app) {\n        this.app = app;\n        this.INTERNAL = new ProjectManagementInternals();\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'First argument passed to admin.projectManagement() must be a valid Firebase app '\n                + 'instance.');\n        }\n        // Assert that a specific project ID was provided within the app.\n        this.projectId = utils.getProjectId(app);\n        if (!validator.isNonEmptyString(this.projectId)) {\n            throw new error_1.FirebaseProjectManagementError('invalid-project-id', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\n                + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\n                + 'environment variable.');\n        }\n        this.resourceName = \"projects/\" + this.projectId;\n        this.requestHandler = new project_management_api_request_1.ProjectManagementRequestHandler(app);\n    }\n    /**\n     * Lists up to 100 Firebase Android apps associated with this Firebase project.\n     */\n    ProjectManagement.prototype.listAndroidApps = function () {\n        return this.listPlatformApps('android', 'listAndroidApps()');\n    };\n    /**\n     * Lists up to 100 Firebase iOS apps associated with this Firebase project.\n     */\n    ProjectManagement.prototype.listIosApps = function () {\n        return this.listPlatformApps('ios', 'listIosApps()');\n    };\n    /**\n     * Returns an AndroidApp object for the given appId. No RPC is made.\n     */\n    ProjectManagement.prototype.androidApp = function (appId) {\n        return new android_app_1.AndroidApp(appId, this.requestHandler);\n    };\n    /**\n     * Returns an IosApp object for the given appId. No RPC is made.\n     */\n    ProjectManagement.prototype.iosApp = function (appId) {\n        return new ios_app_1.IosApp(appId, this.requestHandler);\n    };\n    /**\n     * Returns a ShaCertificate object for the given shaHash. No RPC is made.\n     */\n    ProjectManagement.prototype.shaCertificate = function (shaHash) {\n        return new android_app_1.ShaCertificate(shaHash);\n    };\n    /**\n     * Creates a new Firebase Android app, associated with this Firebase project.\n     */\n    ProjectManagement.prototype.createAndroidApp = function (packageName, displayName) {\n        var _this = this;\n        return this.requestHandler.createAndroidApp(this.resourceName, packageName, displayName)\n            .then(function (responseData) {\n            project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createAndroidApp()\\'s responseData must be a non-null object.');\n            project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(responseData.appId), responseData, \"\\\"responseData.appId\\\" field must be present in createAndroidApp()'s response data.\");\n            return new android_app_1.AndroidApp(responseData.appId, _this.requestHandler);\n        });\n    };\n    /**\n     * Creates a new Firebase iOS app, associated with this Firebase project.\n     */\n    ProjectManagement.prototype.createIosApp = function (bundleId, displayName) {\n        var _this = this;\n        return this.requestHandler.createIosApp(this.resourceName, bundleId, displayName)\n            .then(function (responseData) {\n            project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createIosApp()\\'s responseData must be a non-null object.');\n            project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(responseData.appId), responseData, \"\\\"responseData.appId\\\" field must be present in createIosApp()'s response data.\");\n            return new ios_app_1.IosApp(responseData.appId, _this.requestHandler);\n        });\n    };\n    /**\n     * Lists up to 100 Firebase apps associated with this Firebase project.\n     */\n    ProjectManagement.prototype.listAppMetadata = function () {\n        var _this = this;\n        return this.requestHandler.listAppMetadata(this.resourceName)\n            .then(function (responseData) { return _this.transformResponseToAppMetadata(responseData); });\n    };\n    /**\n     * Update display name of the project\n     */\n    ProjectManagement.prototype.setDisplayName = function (newDisplayName) {\n        return this.requestHandler.setDisplayName(this.resourceName, newDisplayName);\n    };\n    ProjectManagement.prototype.transformResponseToAppMetadata = function (responseData) {\n        var _this = this;\n        this.assertListAppsResponseData(responseData, 'listAppMetadata()');\n        if (!responseData.apps) {\n            return [];\n        }\n        return responseData.apps.map(function (appJson) {\n            project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(appJson.appId), responseData, \"\\\"apps[].appId\\\" field must be present in the listAppMetadata() response data.\");\n            project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(appJson.platform), responseData, \"\\\"apps[].platform\\\" field must be present in the listAppMetadata() response data.\");\n            var metadata = {\n                appId: appJson.appId,\n                platform: app_metadata_1.AppPlatform[appJson.platform] || app_metadata_1.AppPlatform.PLATFORM_UNKNOWN,\n                projectId: _this.projectId,\n                resourceName: appJson.name,\n            };\n            if (appJson.displayName) {\n                metadata.displayName = appJson.displayName;\n            }\n            return metadata;\n        });\n    };\n    /**\n     * Lists up to 100 Firebase apps for a specified platform, associated with this Firebase project.\n     */\n    ProjectManagement.prototype.listPlatformApps = function (platform, callerName) {\n        var _this = this;\n        var listPromise = (platform === 'android') ?\n            this.requestHandler.listAndroidApps(this.resourceName)\n            : this.requestHandler.listIosApps(this.resourceName);\n        return listPromise\n            .then(function (responseData) {\n            _this.assertListAppsResponseData(responseData, callerName);\n            if (!responseData.apps) {\n                return [];\n            }\n            return responseData.apps.map(function (appJson) {\n                project_management_api_request_1.assertServerResponse(validator.isNonEmptyString(appJson.appId), responseData, \"\\\"apps[].appId\\\" field must be present in the \" + callerName + \" response data.\");\n                if (platform === 'android') {\n                    return new android_app_1.AndroidApp(appJson.appId, _this.requestHandler);\n                }\n                else {\n                    return new ios_app_1.IosApp(appJson.appId, _this.requestHandler);\n                }\n            });\n        });\n    };\n    ProjectManagement.prototype.assertListAppsResponseData = function (responseData, callerName) {\n        project_management_api_request_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, callerName + \"'s responseData must be a non-null object.\");\n        if (responseData.apps) {\n            project_management_api_request_1.assertServerResponse(validator.isArray(responseData.apps), responseData, \"\\\"apps\\\" field must be present in the \" + callerName + \" response data.\");\n        }\n    };\n    return ProjectManagement;\n}());\nexports.ProjectManagement = ProjectManagement;\n"]},"metadata":{},"sourceType":"script"}