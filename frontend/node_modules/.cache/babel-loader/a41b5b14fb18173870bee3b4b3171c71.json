{"ast":null,"code":"'use strict';\n\nmodule.exports = writeFile;\nmodule.exports.sync = writeFileSync;\nmodule.exports._getTmpname = getTmpname; // for testing\n\nmodule.exports._cleanupOnExit = cleanupOnExit;\n\nconst fs = require('fs');\n\nconst MurmurHash3 = require('imurmurhash');\n\nconst onExit = require('signal-exit');\n\nconst path = require('path');\n\nconst isTypedArray = require('is-typedarray');\n\nconst typedArrayToBuffer = require('typedarray-to-buffer');\n\nconst _require = require('util'),\n      promisify = _require.promisify;\n\nconst activeFiles = {}; // if we run inside of a worker_thread, `process.pid` is not unique\n\n/* istanbul ignore next */\n\nconst threadId = function getId() {\n  try {\n    const workerThreads = require('worker_threads'); /// if we are in main thread, this is set to `0`\n\n\n    return workerThreads.threadId;\n  } catch (e) {\n    // worker_threads are not available, fallback to 0\n    return 0;\n  }\n}();\n\nlet invocations = 0;\n\nfunction getTmpname(filename) {\n  return filename + '.' + MurmurHash3(__filename).hash(String(process.pid)).hash(String(threadId)).hash(String(++invocations)).result();\n}\n\nfunction cleanupOnExit(tmpfile) {\n  return () => {\n    try {\n      fs.unlinkSync(typeof tmpfile === 'function' ? tmpfile() : tmpfile);\n    } catch (_) {}\n  };\n}\n\nfunction serializeActiveFile(absoluteName) {\n  return new Promise(resolve => {\n    // make a queue if it doesn't already exist\n    if (!activeFiles[absoluteName]) activeFiles[absoluteName] = [];\n    activeFiles[absoluteName].push(resolve); // add this job to the queue\n\n    if (activeFiles[absoluteName].length === 1) resolve(); // kick off the first one\n  });\n}\n\nasync function writeFileAsync(filename, data, options = {}) {\n  if (typeof options === 'string') {\n    options = {\n      encoding: options\n    };\n  }\n\n  let fd;\n  let tmpfile;\n  /* istanbul ignore next -- The closure only gets called when onExit triggers */\n\n  const removeOnExitHandler = onExit(cleanupOnExit(() => tmpfile));\n  const absoluteName = path.resolve(filename);\n\n  try {\n    await serializeActiveFile(absoluteName);\n    const truename = await promisify(fs.realpath)(filename).catch(() => filename);\n    tmpfile = getTmpname(truename);\n\n    if (!options.mode || !options.chown) {\n      // Either mode or chown is not explicitly set\n      // Default behavior is to copy it from original file\n      const stats = await promisify(fs.stat)(truename).catch(() => {});\n\n      if (stats) {\n        if (options.mode == null) {\n          options.mode = stats.mode;\n        }\n\n        if (options.chown == null && process.getuid) {\n          options.chown = {\n            uid: stats.uid,\n            gid: stats.gid\n          };\n        }\n      }\n    }\n\n    fd = await promisify(fs.open)(tmpfile, 'w', options.mode);\n\n    if (options.tmpfileCreated) {\n      await options.tmpfileCreated(tmpfile);\n    }\n\n    if (isTypedArray(data)) {\n      data = typedArrayToBuffer(data);\n    }\n\n    if (Buffer.isBuffer(data)) {\n      await promisify(fs.write)(fd, data, 0, data.length, 0);\n    } else if (data != null) {\n      await promisify(fs.write)(fd, String(data), 0, String(options.encoding || 'utf8'));\n    }\n\n    if (options.fsync !== false) {\n      await promisify(fs.fsync)(fd);\n    }\n\n    await promisify(fs.close)(fd);\n    fd = null;\n\n    if (options.chown) {\n      await promisify(fs.chown)(tmpfile, options.chown.uid, options.chown.gid);\n    }\n\n    if (options.mode) {\n      await promisify(fs.chmod)(tmpfile, options.mode);\n    }\n\n    await promisify(fs.rename)(tmpfile, truename);\n  } finally {\n    if (fd) {\n      await promisify(fs.close)(fd).catch(\n      /* istanbul ignore next */\n      () => {});\n    }\n\n    removeOnExitHandler();\n    await promisify(fs.unlink)(tmpfile).catch(() => {});\n    activeFiles[absoluteName].shift(); // remove the element added by serializeSameFile\n\n    if (activeFiles[absoluteName].length > 0) {\n      activeFiles[absoluteName][0](); // start next job if one is pending\n    } else delete activeFiles[absoluteName];\n  }\n}\n\nfunction writeFile(filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options;\n    options = {};\n  }\n\n  const promise = writeFileAsync(filename, data, options);\n\n  if (callback) {\n    promise.then(callback, callback);\n  }\n\n  return promise;\n}\n\nfunction writeFileSync(filename, data, options) {\n  if (typeof options === 'string') options = {\n    encoding: options\n  };else if (!options) options = {};\n\n  try {\n    filename = fs.realpathSync(filename);\n  } catch (ex) {// it's ok, it'll happen on a not yet existing file\n  }\n\n  const tmpfile = getTmpname(filename);\n\n  if (!options.mode || !options.chown) {\n    // Either mode or chown is not explicitly set\n    // Default behavior is to copy it from original file\n    try {\n      const stats = fs.statSync(filename);\n      options = Object.assign({}, options);\n\n      if (!options.mode) {\n        options.mode = stats.mode;\n      }\n\n      if (!options.chown && process.getuid) {\n        options.chown = {\n          uid: stats.uid,\n          gid: stats.gid\n        };\n      }\n    } catch (ex) {// ignore stat errors\n    }\n  }\n\n  let fd;\n  const cleanup = cleanupOnExit(tmpfile);\n  const removeOnExitHandler = onExit(cleanup);\n  let threw = true;\n\n  try {\n    fd = fs.openSync(tmpfile, 'w', options.mode);\n\n    if (options.tmpfileCreated) {\n      options.tmpfileCreated(tmpfile);\n    }\n\n    if (isTypedArray(data)) {\n      data = typedArrayToBuffer(data);\n    }\n\n    if (Buffer.isBuffer(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0);\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'));\n    }\n\n    if (options.fsync !== false) {\n      fs.fsyncSync(fd);\n    }\n\n    fs.closeSync(fd);\n    fd = null;\n    if (options.chown) fs.chownSync(tmpfile, options.chown.uid, options.chown.gid);\n    if (options.mode) fs.chmodSync(tmpfile, options.mode);\n    fs.renameSync(tmpfile, filename);\n    threw = false;\n  } finally {\n    if (fd) {\n      try {\n        fs.closeSync(fd);\n      } catch (ex) {// ignore close errors at this stage, error may have closed fd already.\n      }\n    }\n\n    removeOnExitHandler();\n\n    if (threw) {\n      cleanup();\n    }\n  }\n}","map":{"version":3,"sources":["/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/configstore/node_modules/write-file-atomic/index.js"],"names":["module","exports","writeFile","sync","writeFileSync","_getTmpname","getTmpname","_cleanupOnExit","cleanupOnExit","fs","require","MurmurHash3","onExit","path","isTypedArray","typedArrayToBuffer","promisify","activeFiles","threadId","getId","workerThreads","e","invocations","filename","__filename","hash","String","process","pid","result","tmpfile","unlinkSync","_","serializeActiveFile","absoluteName","Promise","resolve","push","length","writeFileAsync","data","options","encoding","fd","removeOnExitHandler","truename","realpath","catch","mode","chown","stats","stat","getuid","uid","gid","open","tmpfileCreated","Buffer","isBuffer","write","fsync","close","chmod","rename","unlink","shift","callback","Function","promise","then","realpathSync","ex","statSync","Object","assign","cleanup","threw","openSync","writeSync","fsyncSync","closeSync","chownSync","chmodSync","renameSync"],"mappings":"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","sourcesContent":["'use strict'\nmodule.exports = writeFile\nmodule.exports.sync = writeFileSync\nmodule.exports._getTmpname = getTmpname // for testing\nmodule.exports._cleanupOnExit = cleanupOnExit\n\nconst fs = require('fs')\nconst MurmurHash3 = require('imurmurhash')\nconst onExit = require('signal-exit')\nconst path = require('path')\nconst isTypedArray = require('is-typedarray')\nconst typedArrayToBuffer = require('typedarray-to-buffer')\nconst { promisify } = require('util')\nconst activeFiles = {}\n\n// if we run inside of a worker_thread, `process.pid` is not unique\n/* istanbul ignore next */\nconst threadId = (function getId () {\n  try {\n    const workerThreads = require('worker_threads')\n\n    /// if we are in main thread, this is set to `0`\n    return workerThreads.threadId\n  } catch (e) {\n    // worker_threads are not available, fallback to 0\n    return 0\n  }\n})()\n\nlet invocations = 0\nfunction getTmpname (filename) {\n  return filename + '.' +\n    MurmurHash3(__filename)\n      .hash(String(process.pid))\n      .hash(String(threadId))\n      .hash(String(++invocations))\n      .result()\n}\n\nfunction cleanupOnExit (tmpfile) {\n  return () => {\n    try {\n      fs.unlinkSync(typeof tmpfile === 'function' ? tmpfile() : tmpfile)\n    } catch (_) {}\n  }\n}\n\nfunction serializeActiveFile (absoluteName) {\n  return new Promise(resolve => {\n    // make a queue if it doesn't already exist\n    if (!activeFiles[absoluteName]) activeFiles[absoluteName] = []\n\n    activeFiles[absoluteName].push(resolve) // add this job to the queue\n    if (activeFiles[absoluteName].length === 1) resolve() // kick off the first one\n  })\n}\n\nasync function writeFileAsync (filename, data, options = {}) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  }\n\n  let fd\n  let tmpfile\n  /* istanbul ignore next -- The closure only gets called when onExit triggers */\n  const removeOnExitHandler = onExit(cleanupOnExit(() => tmpfile))\n  const absoluteName = path.resolve(filename)\n\n  try {\n    await serializeActiveFile(absoluteName)\n    const truename = await promisify(fs.realpath)(filename).catch(() => filename)\n    tmpfile = getTmpname(truename)\n\n    if (!options.mode || !options.chown) {\n      // Either mode or chown is not explicitly set\n      // Default behavior is to copy it from original file\n      const stats = await promisify(fs.stat)(truename).catch(() => {})\n      if (stats) {\n        if (options.mode == null) {\n          options.mode = stats.mode\n        }\n\n        if (options.chown == null && process.getuid) {\n          options.chown = { uid: stats.uid, gid: stats.gid }\n        }\n      }\n    }\n\n    fd = await promisify(fs.open)(tmpfile, 'w', options.mode)\n    if (options.tmpfileCreated) {\n      await options.tmpfileCreated(tmpfile)\n    }\n    if (isTypedArray(data)) {\n      data = typedArrayToBuffer(data)\n    }\n    if (Buffer.isBuffer(data)) {\n      await promisify(fs.write)(fd, data, 0, data.length, 0)\n    } else if (data != null) {\n      await promisify(fs.write)(fd, String(data), 0, String(options.encoding || 'utf8'))\n    }\n\n    if (options.fsync !== false) {\n      await promisify(fs.fsync)(fd)\n    }\n\n    await promisify(fs.close)(fd)\n    fd = null\n\n    if (options.chown) {\n      await promisify(fs.chown)(tmpfile, options.chown.uid, options.chown.gid)\n    }\n\n    if (options.mode) {\n      await promisify(fs.chmod)(tmpfile, options.mode)\n    }\n\n    await promisify(fs.rename)(tmpfile, truename)\n  } finally {\n    if (fd) {\n      await promisify(fs.close)(fd).catch(\n        /* istanbul ignore next */\n        () => {}\n      )\n    }\n    removeOnExitHandler()\n    await promisify(fs.unlink)(tmpfile).catch(() => {})\n    activeFiles[absoluteName].shift() // remove the element added by serializeSameFile\n    if (activeFiles[absoluteName].length > 0) {\n      activeFiles[absoluteName][0]() // start next job if one is pending\n    } else delete activeFiles[absoluteName]\n  }\n}\n\nfunction writeFile (filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options\n    options = {}\n  }\n\n  const promise = writeFileAsync(filename, data, options)\n  if (callback) {\n    promise.then(callback, callback)\n  }\n\n  return promise\n}\n\nfunction writeFileSync (filename, data, options) {\n  if (typeof options === 'string') options = { encoding: options }\n  else if (!options) options = {}\n  try {\n    filename = fs.realpathSync(filename)\n  } catch (ex) {\n    // it's ok, it'll happen on a not yet existing file\n  }\n  const tmpfile = getTmpname(filename)\n\n  if (!options.mode || !options.chown) {\n    // Either mode or chown is not explicitly set\n    // Default behavior is to copy it from original file\n    try {\n      const stats = fs.statSync(filename)\n      options = Object.assign({}, options)\n      if (!options.mode) {\n        options.mode = stats.mode\n      }\n      if (!options.chown && process.getuid) {\n        options.chown = { uid: stats.uid, gid: stats.gid }\n      }\n    } catch (ex) {\n      // ignore stat errors\n    }\n  }\n\n  let fd\n  const cleanup = cleanupOnExit(tmpfile)\n  const removeOnExitHandler = onExit(cleanup)\n\n  let threw = true\n  try {\n    fd = fs.openSync(tmpfile, 'w', options.mode)\n    if (options.tmpfileCreated) {\n      options.tmpfileCreated(tmpfile)\n    }\n    if (isTypedArray(data)) {\n      data = typedArrayToBuffer(data)\n    }\n    if (Buffer.isBuffer(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0)\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'))\n    }\n    if (options.fsync !== false) {\n      fs.fsyncSync(fd)\n    }\n    fs.closeSync(fd)\n    fd = null\n    if (options.chown) fs.chownSync(tmpfile, options.chown.uid, options.chown.gid)\n    if (options.mode) fs.chmodSync(tmpfile, options.mode)\n    fs.renameSync(tmpfile, filename)\n    threw = false\n  } finally {\n    if (fd) {\n      try {\n        fs.closeSync(fd)\n      } catch (ex) {\n        // ignore close errors at this stage, error may have closed fd already.\n      }\n    }\n    removeOnExitHandler()\n    if (threw) {\n      cleanup()\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}