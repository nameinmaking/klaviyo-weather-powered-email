{"ast":null,"code":"/*! firebase-admin v8.8.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../utils/error\");\n\nvar instance_id_request_1 = require(\"./instance-id-request\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n/**\n * Internals of an InstanceId service instance.\n */\n\n\nvar InstanceIdInternals =\n/** @class */\nfunction () {\n  function InstanceIdInternals() {}\n  /**\n   * Deletes the service and its associated resources.\n   *\n   * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\n   */\n\n\n  InstanceIdInternals.prototype.delete = function () {\n    // There are no resources to clean up\n    return Promise.resolve(undefined);\n  };\n\n  return InstanceIdInternals;\n}();\n\nvar InstanceId =\n/** @class */\nfunction () {\n  /**\n   * @param {FirebaseApp} app The app for this InstanceId service.\n   * @constructor\n   */\n  function InstanceId(app) {\n    this.INTERNAL = new InstanceIdInternals();\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseInstanceIdError(error_1.InstanceIdClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.instanceId() must be a valid Firebase app instance.');\n    }\n\n    var projectId = utils.getProjectId(app);\n\n    if (!validator.isNonEmptyString(projectId)) {\n      // Assert for an explicit projct ID (either via AppOptions or the cert itself).\n      throw new error_1.FirebaseInstanceIdError(error_1.InstanceIdClientErrorCode.INVALID_PROJECT_ID, 'Failed to determine project ID for InstanceId. Initialize the ' + 'SDK with service account credentials or set project ID as an app option. ' + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');\n    }\n\n    this.app_ = app;\n    this.requestHandler = new instance_id_request_1.FirebaseInstanceIdRequestHandler(app, projectId);\n  }\n  /**\n   * Deletes the specified instance ID from Firebase. This can be used to delete an instance ID\n   * and associated user data from a Firebase project, pursuant to the General Data Protection\n   * Regulation (GDPR).\n   *\n   * @param {string} instanceId The instance ID to be deleted\n   * @return {Promise<void>} A promise that resolves when the instance ID is successfully deleted.\n   */\n\n\n  InstanceId.prototype.deleteInstanceId = function (instanceId) {\n    return this.requestHandler.deleteInstanceId(instanceId).then(function (result) {// Return nothing on success\n    });\n  };\n\n  Object.defineProperty(InstanceId.prototype, \"app\", {\n    /**\n     * Returns the app associated with this InstanceId instance.\n     *\n     * @return {FirebaseApp} The app associated with this InstanceId instance.\n     */\n    get: function () {\n      return this.app_;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return InstanceId;\n}();\n\nexports.InstanceId = InstanceId;","map":{"version":3,"sources":["/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/firebase-admin/lib/instance-id/instance-id.js"],"names":["Object","defineProperty","exports","value","error_1","require","instance_id_request_1","utils","validator","InstanceIdInternals","prototype","delete","Promise","resolve","undefined","InstanceId","app","INTERNAL","isNonNullObject","FirebaseInstanceIdError","InstanceIdClientErrorCode","INVALID_ARGUMENT","projectId","getProjectId","isNonEmptyString","INVALID_PROJECT_ID","app_","requestHandler","FirebaseInstanceIdRequestHandler","deleteInstanceId","instanceId","then","result","get","enumerable","configurable"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;;;;;;;AAeAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAArB;;AACA,IAAIC,qBAAqB,GAAGD,OAAO,CAAC,uBAAD,CAAnC;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,oBAAD,CAAvB;AACA;;;;;AAGA,IAAII,mBAAmB;AAAG;AAAe,YAAY;AACjD,WAASA,mBAAT,GAA+B,CAC9B;AACD;;;;;;;AAKAA,EAAAA,mBAAmB,CAACC,SAApB,CAA8BC,MAA9B,GAAuC,YAAY;AAC/C;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgBC,SAAhB,CAAP;AACH,GAHD;;AAIA,SAAOL,mBAAP;AACH,CAbwC,EAAzC;;AAcA,IAAIM,UAAU;AAAG;AAAe,YAAY;AACxC;;;;AAIA,WAASA,UAAT,CAAoBC,GAApB,EAAyB;AACrB,SAAKC,QAAL,GAAgB,IAAIR,mBAAJ,EAAhB;;AACA,QAAI,CAACD,SAAS,CAACU,eAAV,CAA0BF,GAA1B,CAAD,IAAmC,EAAE,aAAaA,GAAf,CAAvC,EAA4D;AACxD,YAAM,IAAIZ,OAAO,CAACe,uBAAZ,CAAoCf,OAAO,CAACgB,yBAAR,CAAkCC,gBAAtE,EAAwF,oFAAxF,CAAN;AACH;;AACD,QAAIC,SAAS,GAAGf,KAAK,CAACgB,YAAN,CAAmBP,GAAnB,CAAhB;;AACA,QAAI,CAACR,SAAS,CAACgB,gBAAV,CAA2BF,SAA3B,CAAL,EAA4C;AACxC;AACA,YAAM,IAAIlB,OAAO,CAACe,uBAAZ,CAAoCf,OAAO,CAACgB,yBAAR,CAAkCK,kBAAtE,EAA0F,mEAC1F,2EAD0F,GAE1F,kEAFA,CAAN;AAGH;;AACD,SAAKC,IAAL,GAAYV,GAAZ;AACA,SAAKW,cAAL,GAAsB,IAAIrB,qBAAqB,CAACsB,gCAA1B,CAA2DZ,GAA3D,EAAgEM,SAAhE,CAAtB;AACH;AACD;;;;;;;;;;AAQAP,EAAAA,UAAU,CAACL,SAAX,CAAqBmB,gBAArB,GAAwC,UAAUC,UAAV,EAAsB;AAC1D,WAAO,KAAKH,cAAL,CAAoBE,gBAApB,CAAqCC,UAArC,EACFC,IADE,CACG,UAAUC,MAAV,EAAkB,CACxB;AACH,KAHM,CAAP;AAIH,GALD;;AAMAhC,EAAAA,MAAM,CAACC,cAAP,CAAsBc,UAAU,CAACL,SAAjC,EAA4C,KAA5C,EAAmD;AAC/C;;;;;AAKAuB,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKP,IAAZ;AACH,KAR8C;AAS/CQ,IAAAA,UAAU,EAAE,IATmC;AAU/CC,IAAAA,YAAY,EAAE;AAViC,GAAnD;AAYA,SAAOpB,UAAP;AACH,CA/C+B,EAAhC;;AAgDAb,OAAO,CAACa,UAAR,GAAqBA,UAArB","sourcesContent":["/*! firebase-admin v8.8.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar error_1 = require(\"../utils/error\");\nvar instance_id_request_1 = require(\"./instance-id-request\");\nvar utils = require(\"../utils/index\");\nvar validator = require(\"../utils/validator\");\n/**\n * Internals of an InstanceId service instance.\n */\nvar InstanceIdInternals = /** @class */ (function () {\n    function InstanceIdInternals() {\n    }\n    /**\n     * Deletes the service and its associated resources.\n     *\n     * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\n     */\n    InstanceIdInternals.prototype.delete = function () {\n        // There are no resources to clean up\n        return Promise.resolve(undefined);\n    };\n    return InstanceIdInternals;\n}());\nvar InstanceId = /** @class */ (function () {\n    /**\n     * @param {FirebaseApp} app The app for this InstanceId service.\n     * @constructor\n     */\n    function InstanceId(app) {\n        this.INTERNAL = new InstanceIdInternals();\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new error_1.FirebaseInstanceIdError(error_1.InstanceIdClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.instanceId() must be a valid Firebase app instance.');\n        }\n        var projectId = utils.getProjectId(app);\n        if (!validator.isNonEmptyString(projectId)) {\n            // Assert for an explicit projct ID (either via AppOptions or the cert itself).\n            throw new error_1.FirebaseInstanceIdError(error_1.InstanceIdClientErrorCode.INVALID_PROJECT_ID, 'Failed to determine project ID for InstanceId. Initialize the '\n                + 'SDK with service account credentials or set project ID as an app option. '\n                + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');\n        }\n        this.app_ = app;\n        this.requestHandler = new instance_id_request_1.FirebaseInstanceIdRequestHandler(app, projectId);\n    }\n    /**\n     * Deletes the specified instance ID from Firebase. This can be used to delete an instance ID\n     * and associated user data from a Firebase project, pursuant to the General Data Protection\n     * Regulation (GDPR).\n     *\n     * @param {string} instanceId The instance ID to be deleted\n     * @return {Promise<void>} A promise that resolves when the instance ID is successfully deleted.\n     */\n    InstanceId.prototype.deleteInstanceId = function (instanceId) {\n        return this.requestHandler.deleteInstanceId(instanceId)\n            .then(function (result) {\n            // Return nothing on success\n        });\n    };\n    Object.defineProperty(InstanceId.prototype, \"app\", {\n        /**\n         * Returns the app associated with this InstanceId instance.\n         *\n         * @return {FirebaseApp} The app associated with this InstanceId instance.\n         */\n        get: function () {\n            return this.app_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return InstanceId;\n}());\nexports.InstanceId = InstanceId;\n"]},"metadata":{},"sourceType":"script"}