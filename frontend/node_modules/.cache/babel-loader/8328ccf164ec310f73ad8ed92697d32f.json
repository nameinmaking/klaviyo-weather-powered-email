{"ast":null,"code":"/*! firebase-admin v8.8.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar PART_BOUNDARY = '__END_OF_PART__';\nvar TEN_SECONDS_IN_MILLIS = 10000;\n/**\n * An HTTP client that can be used to make batch requests. This client is not tied to any service\n * (FCM or otherwise). Therefore it can be used to make batch requests to any service that allows\n * it. If this requirement ever arises we can move this implementation to the utils module\n * where it can be easily shared among other modules.\n */\n\nvar BatchRequestClient =\n/** @class */\nfunction () {\n  /**\n   * @param {HttpClient} httpClient The client that will be used to make HTTP calls.\n   * @param {string} batchUrl The URL that accepts batch requests.\n   * @param {object=} commonHeaders Optional headers that will be included in all requests.\n   *\n   * @constructor\n   */\n  function BatchRequestClient(httpClient, batchUrl, commonHeaders) {\n    this.httpClient = httpClient;\n    this.batchUrl = batchUrl;\n    this.commonHeaders = commonHeaders;\n  }\n  /**\n   * Sends the given array of sub requests as a single batch, and parses the results into an array\n   * of HttpResponse objects.\n   *\n   * @param {SubRequest[]} requests An array of sub requests to send.\n   * @return {Promise<HttpResponse[]>} A promise that resolves when the send operation is complete.\n   */\n\n\n  BatchRequestClient.prototype.send = function (requests) {\n    var _this = this;\n\n    requests = requests.map(function (req) {\n      req.headers = Object.assign({}, _this.commonHeaders, req.headers);\n      return req;\n    });\n    var requestHeaders = {\n      'Content-Type': \"multipart/mixed; boundary=\" + PART_BOUNDARY\n    };\n    var request = {\n      method: 'POST',\n      url: this.batchUrl,\n      data: this.getMultipartPayload(requests),\n      headers: Object.assign({}, this.commonHeaders, requestHeaders),\n      timeout: TEN_SECONDS_IN_MILLIS\n    };\n    return this.httpClient.send(request).then(function (response) {\n      return response.multipart.map(function (buff) {\n        return api_request_1.parseHttpResponse(buff, request);\n      });\n    });\n  };\n\n  BatchRequestClient.prototype.getMultipartPayload = function (requests) {\n    var buffer = '';\n    requests.forEach(function (request, idx) {\n      buffer += createPart(request, PART_BOUNDARY, idx);\n    });\n    buffer += \"--\" + PART_BOUNDARY + \"--\\r\\n\";\n    return Buffer.from(buffer, 'utf-8');\n  };\n\n  return BatchRequestClient;\n}();\n\nexports.BatchRequestClient = BatchRequestClient;\n/**\n * Creates a single part in a multipart HTTP request body. The part consists of several headers\n * followed by the serialized sub request as the body. As per the requirements of the FCM batch\n * API, sets the content-type header to application/http, and the content-transfer-encoding to\n * binary.\n *\n * @param {SubRequest} request A sub request that will be used to populate the part.\n * @param {string} boundary Multipart boundary string.\n * @param {number} idx An index number that is used to set the content-id header.\n * @return {string} The part as a string that can be included in the HTTP body.\n */\n\nfunction createPart(request, boundary, idx) {\n  var serializedRequest = serializeSubRequest(request);\n  var part = \"--\" + boundary + \"\\r\\n\";\n  part += \"Content-Length: \" + serializedRequest.length + \"\\r\\n\";\n  part += 'Content-Type: application/http\\r\\n';\n  part += \"content-id: \" + (idx + 1) + \"\\r\\n\";\n  part += 'content-transfer-encoding: binary\\r\\n';\n  part += '\\r\\n';\n  part += serializedRequest + \"\\r\\n\";\n  return part;\n}\n/**\n * Serializes a sub request into a string that can be embedded in a multipart HTTP request. The\n * format of the string is the wire format of a typical HTTP request, consisting of a header and a\n * body.\n *\n * @param request {SubRequest} The sub request to be serialized.\n * @return {string} String representation of the SubRequest.\n */\n\n\nfunction serializeSubRequest(request) {\n  var requestBody = JSON.stringify(request.body);\n  var messagePayload = \"POST \" + request.url + \" HTTP/1.1\\r\\n\";\n  messagePayload += \"Content-Length: \" + requestBody.length + \"\\r\\n\";\n  messagePayload += 'Content-Type: application/json; charset=UTF-8\\r\\n';\n\n  if (request.headers) {\n    Object.keys(request.headers).forEach(function (key) {\n      messagePayload += key + \": \" + request.headers[key] + \"\\r\\n\";\n    });\n  }\n\n  messagePayload += '\\r\\n';\n  messagePayload += requestBody;\n  return messagePayload;\n}","map":{"version":3,"sources":["/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/firebase-admin/lib/messaging/batch-request.js"],"names":["Object","defineProperty","exports","value","api_request_1","require","PART_BOUNDARY","TEN_SECONDS_IN_MILLIS","BatchRequestClient","httpClient","batchUrl","commonHeaders","prototype","send","requests","_this","map","req","headers","assign","requestHeaders","request","method","url","data","getMultipartPayload","timeout","then","response","multipart","buff","parseHttpResponse","buffer","forEach","idx","createPart","Buffer","from","boundary","serializedRequest","serializeSubRequest","part","length","requestBody","JSON","stringify","body","messagePayload","keys","key"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.8.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar api_request_1 = require(\"../utils/api-request\");\nvar PART_BOUNDARY = '__END_OF_PART__';\nvar TEN_SECONDS_IN_MILLIS = 10000;\n/**\n * An HTTP client that can be used to make batch requests. This client is not tied to any service\n * (FCM or otherwise). Therefore it can be used to make batch requests to any service that allows\n * it. If this requirement ever arises we can move this implementation to the utils module\n * where it can be easily shared among other modules.\n */\nvar BatchRequestClient = /** @class */ (function () {\n    /**\n     * @param {HttpClient} httpClient The client that will be used to make HTTP calls.\n     * @param {string} batchUrl The URL that accepts batch requests.\n     * @param {object=} commonHeaders Optional headers that will be included in all requests.\n     *\n     * @constructor\n     */\n    function BatchRequestClient(httpClient, batchUrl, commonHeaders) {\n        this.httpClient = httpClient;\n        this.batchUrl = batchUrl;\n        this.commonHeaders = commonHeaders;\n    }\n    /**\n     * Sends the given array of sub requests as a single batch, and parses the results into an array\n     * of HttpResponse objects.\n     *\n     * @param {SubRequest[]} requests An array of sub requests to send.\n     * @return {Promise<HttpResponse[]>} A promise that resolves when the send operation is complete.\n     */\n    BatchRequestClient.prototype.send = function (requests) {\n        var _this = this;\n        requests = requests.map(function (req) {\n            req.headers = Object.assign({}, _this.commonHeaders, req.headers);\n            return req;\n        });\n        var requestHeaders = {\n            'Content-Type': \"multipart/mixed; boundary=\" + PART_BOUNDARY,\n        };\n        var request = {\n            method: 'POST',\n            url: this.batchUrl,\n            data: this.getMultipartPayload(requests),\n            headers: Object.assign({}, this.commonHeaders, requestHeaders),\n            timeout: TEN_SECONDS_IN_MILLIS,\n        };\n        return this.httpClient.send(request).then(function (response) {\n            return response.multipart.map(function (buff) {\n                return api_request_1.parseHttpResponse(buff, request);\n            });\n        });\n    };\n    BatchRequestClient.prototype.getMultipartPayload = function (requests) {\n        var buffer = '';\n        requests.forEach(function (request, idx) {\n            buffer += createPart(request, PART_BOUNDARY, idx);\n        });\n        buffer += \"--\" + PART_BOUNDARY + \"--\\r\\n\";\n        return Buffer.from(buffer, 'utf-8');\n    };\n    return BatchRequestClient;\n}());\nexports.BatchRequestClient = BatchRequestClient;\n/**\n * Creates a single part in a multipart HTTP request body. The part consists of several headers\n * followed by the serialized sub request as the body. As per the requirements of the FCM batch\n * API, sets the content-type header to application/http, and the content-transfer-encoding to\n * binary.\n *\n * @param {SubRequest} request A sub request that will be used to populate the part.\n * @param {string} boundary Multipart boundary string.\n * @param {number} idx An index number that is used to set the content-id header.\n * @return {string} The part as a string that can be included in the HTTP body.\n */\nfunction createPart(request, boundary, idx) {\n    var serializedRequest = serializeSubRequest(request);\n    var part = \"--\" + boundary + \"\\r\\n\";\n    part += \"Content-Length: \" + serializedRequest.length + \"\\r\\n\";\n    part += 'Content-Type: application/http\\r\\n';\n    part += \"content-id: \" + (idx + 1) + \"\\r\\n\";\n    part += 'content-transfer-encoding: binary\\r\\n';\n    part += '\\r\\n';\n    part += serializedRequest + \"\\r\\n\";\n    return part;\n}\n/**\n * Serializes a sub request into a string that can be embedded in a multipart HTTP request. The\n * format of the string is the wire format of a typical HTTP request, consisting of a header and a\n * body.\n *\n * @param request {SubRequest} The sub request to be serialized.\n * @return {string} String representation of the SubRequest.\n */\nfunction serializeSubRequest(request) {\n    var requestBody = JSON.stringify(request.body);\n    var messagePayload = \"POST \" + request.url + \" HTTP/1.1\\r\\n\";\n    messagePayload += \"Content-Length: \" + requestBody.length + \"\\r\\n\";\n    messagePayload += 'Content-Type: application/json; charset=UTF-8\\r\\n';\n    if (request.headers) {\n        Object.keys(request.headers).forEach(function (key) {\n            messagePayload += key + \": \" + request.headers[key] + \"\\r\\n\";\n        });\n    }\n    messagePayload += '\\r\\n';\n    messagePayload += requestBody;\n    return messagePayload;\n}\n"]},"metadata":{},"sourceType":"script"}