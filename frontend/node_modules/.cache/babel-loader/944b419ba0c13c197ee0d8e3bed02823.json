{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util = require(\"util\");\n\nconst validate_1 = require(\"./validate\");\n/*! The Firestore library version */\n\n\nlet libVersion;\n/*! The external function used to emit logs. */\n\nlet logFunction = msg => {};\n/**\n * Log function to use for debug output. By default, we don't perform any\n * logging.\n *\n * @private\n */\n\n\nfunction logger(methodName, requestTag, logMessage, ...additionalArgs) {\n  requestTag = requestTag || '#####';\n  const formattedMessage = util.format(logMessage, ...additionalArgs);\n  const time = new Date().toISOString();\n  logFunction(`Firestore (${libVersion}) ${time} ${requestTag} [${methodName}]: ` + formattedMessage);\n}\n\nexports.logger = logger;\n/**\n * Sets the log function for all active Firestore instances.\n */\n\nfunction setLogFunction(logger) {\n  validate_1.validateFunction('logger', logger);\n  logFunction = logger;\n}\n\nexports.setLogFunction = setLogFunction;\n/**\n * Sets the log function for all active Firestore instances.\n *\n * @private\n */\n\nfunction setLibVersion(version) {\n  libVersion = version;\n}\n\nexports.setLibVersion = setLibVersion;","map":{"version":3,"sources":["/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/@google-cloud/firestore/build/src/logger.js"],"names":["Object","defineProperty","exports","value","util","require","validate_1","libVersion","logFunction","msg","logger","methodName","requestTag","logMessage","additionalArgs","formattedMessage","format","time","Date","toISOString","setLogFunction","validateFunction","setLibVersion","version"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;AAeAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;AACA;;;AACA,IAAIE,UAAJ;AACA;;AACA,IAAIC,WAAW,GAAIC,GAAD,IAAS,CAAG,CAA9B;AACA;;;;;;;;AAMA,SAASC,MAAT,CAAgBC,UAAhB,EAA4BC,UAA5B,EAAwCC,UAAxC,EAAoD,GAAGC,cAAvD,EAAuE;AACnEF,EAAAA,UAAU,GAAGA,UAAU,IAAI,OAA3B;AACA,QAAMG,gBAAgB,GAAGX,IAAI,CAACY,MAAL,CAAYH,UAAZ,EAAwB,GAAGC,cAA3B,CAAzB;AACA,QAAMG,IAAI,GAAG,IAAIC,IAAJ,GAAWC,WAAX,EAAb;AACAX,EAAAA,WAAW,CAAE,cAAaD,UAAW,KAAIU,IAAK,IAAGL,UAAW,KAAID,UAAW,KAA/D,GACRI,gBADO,CAAX;AAEH;;AACDb,OAAO,CAACQ,MAAR,GAAiBA,MAAjB;AACA;;;;AAGA,SAASU,cAAT,CAAwBV,MAAxB,EAAgC;AAC5BJ,EAAAA,UAAU,CAACe,gBAAX,CAA4B,QAA5B,EAAsCX,MAAtC;AACAF,EAAAA,WAAW,GAAGE,MAAd;AACH;;AACDR,OAAO,CAACkB,cAAR,GAAyBA,cAAzB;AACA;;;;;;AAKA,SAASE,aAAT,CAAuBC,OAAvB,EAAgC;AAC5BhB,EAAAA,UAAU,GAAGgB,OAAb;AACH;;AACDrB,OAAO,CAACoB,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util = require(\"util\");\nconst validate_1 = require(\"./validate\");\n/*! The Firestore library version */\nlet libVersion;\n/*! The external function used to emit logs. */\nlet logFunction = (msg) => { };\n/**\n * Log function to use for debug output. By default, we don't perform any\n * logging.\n *\n * @private\n */\nfunction logger(methodName, requestTag, logMessage, ...additionalArgs) {\n    requestTag = requestTag || '#####';\n    const formattedMessage = util.format(logMessage, ...additionalArgs);\n    const time = new Date().toISOString();\n    logFunction(`Firestore (${libVersion}) ${time} ${requestTag} [${methodName}]: ` +\n        formattedMessage);\n}\nexports.logger = logger;\n/**\n * Sets the log function for all active Firestore instances.\n */\nfunction setLogFunction(logger) {\n    validate_1.validateFunction('logger', logger);\n    logFunction = logger;\n}\nexports.setLogFunction = setLogFunction;\n/**\n * Sets the log function for all active Firestore instances.\n *\n * @private\n */\nfunction setLibVersion(version) {\n    libVersion = version;\n}\nexports.setLibVersion = setLibVersion;\n//# sourceMappingURL=logger.js.map"]},"metadata":{},"sourceType":"script"}