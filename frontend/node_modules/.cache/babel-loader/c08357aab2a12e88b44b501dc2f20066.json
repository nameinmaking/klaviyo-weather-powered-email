{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n\nconst arrify = require(\"arrify\");\n\nconst util_1 = require(\"./util\");\n/**\n * Get and set IAM policies for your Cloud Storage bucket.\n *\n * @see [Cloud Storage IAM Management](https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management)\n * @see [Granting, Changing, and Revoking Access](https://cloud.google.com/iam/docs/granting-changing-revoking-access)\n * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n *\n * @constructor Iam\n * @mixin\n *\n * @param {Bucket} bucket The parent instance.\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('my-bucket');\n * // bucket.iam\n */\n\n\nclass Iam {\n  constructor(bucket) {\n    this.request_ = bucket.request.bind(bucket);\n    this.resourceId_ = 'buckets/' + bucket.getId();\n  }\n  /**\n   * Get the IAM policy.\n   *\n   * @param {GetPolicyRequest} [options] Request options.\n   * @param {GetPolicyCallback} [callback] Callback function.\n   * @returns {Promise<GetPolicyResponse>}\n   *\n   * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/getIamPolicy}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('my-bucket');\n   * bucket.iam.getPolicy(function(err, policy, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.iam.getPolicy().then(function(data) {\n   *   const policy = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * @example <caption>include:samples/iam.js</caption>\n   * region_tag:storage_view_bucket_iam_members\n   * Example of retrieving a bucket's IAM policy:\n   */\n\n\n  getPolicy(optionsOrCallback, callback) {\n    const _util_1$normalize = util_1.normalize(optionsOrCallback, callback),\n          options = _util_1$normalize.options,\n          cb = _util_1$normalize.callback;\n\n    this.request_({\n      uri: '/iam',\n      qs: options\n    }, cb);\n  }\n  /**\n   * Set the IAM policy.\n   *\n   * @throws {Error} If no policy is provided.\n   *\n   * @param {Policy} policy The policy.\n   * @param {SetPolicyOptions} [options] Configuration opbject.\n   * @param {SetPolicyCallback} callback Callback function.\n   * @returns {Promise<SetPolicyResponse>}\n   *\n   * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/setIamPolicy}\n   * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('my-bucket');\n   *\n   * const myPolicy = {\n   *   bindings: [\n   *     {\n   *       role: 'roles/storage.admin',\n   *       members:\n   * ['serviceAccount:myotherproject@appspot.gserviceaccount.com']\n   *     }\n   *   ]\n   * };\n   *\n   * bucket.iam.setPolicy(myPolicy, function(err, policy, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.iam.setPolicy(myPolicy).then(function(data) {\n   *   const policy = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * @example <caption>include:samples/iam.js</caption>\n   * region_tag:storage_add_bucket_iam_member\n   * Example of adding to a bucket's IAM policy:\n   *\n   * @example <caption>include:samples/iam.js</caption>\n   * region_tag:storage_remove_bucket_iam_member\n   * Example of removing from a bucket's IAM policy:\n   */\n\n\n  setPolicy(policy, optionsOrCallback, callback) {\n    if (policy === null || typeof policy !== 'object') {\n      throw new Error('A policy object is required.');\n    }\n\n    const _util_1$normalize2 = util_1.normalize(optionsOrCallback, callback),\n          options = _util_1$normalize2.options,\n          cb = _util_1$normalize2.callback;\n\n    this.request_({\n      method: 'PUT',\n      uri: '/iam',\n      json: Object.assign({\n        resourceId: this.resourceId_\n      }, policy),\n      qs: options\n    }, cb);\n  }\n  /**\n   * Test a set of permissions for a resource.\n   *\n   * @throws {Error} If permissions are not provided.\n   *\n   * @param {string|string[]} permissions The permission(s) to test for.\n   * @param {TestIamPermissionsOptions} [options] Configuration object.\n   * @param {TestIamPermissionsCallback} [callback] Callback function.\n   * @returns {Promise<TestIamPermissionsResponse>}\n   *\n   * @see [Buckets: testIamPermissions API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/testIamPermissions}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('my-bucket');\n   *\n   * //-\n   * // Test a single permission.\n   * //-\n   * const test = 'storage.buckets.delete';\n   *\n   * bucket.iam.testPermissions(test, function(err, permissions, apiResponse) {\n   *   console.log(permissions);\n   *   // {\n   *   //   \"storage.buckets.delete\": true\n   *   // }\n   * });\n   *\n   * //-\n   * // Test several permissions at once.\n   * //-\n   * const tests = [\n   *   'storage.buckets.delete',\n   *   'storage.buckets.get'\n   * ];\n   *\n   * bucket.iam.testPermissions(tests, function(err, permissions) {\n   *   console.log(permissions);\n   *   // {\n   *   //   \"storage.buckets.delete\": false,\n   *   //   \"storage.buckets.get\": true\n   *   // }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.iam.testPermissions(test).then(function(data) {\n   *   const permissions = data[0];\n   *   const apiResponse = data[1];\n   * });\n   */\n\n\n  testPermissions(permissions, optionsOrCallback, callback) {\n    if (!Array.isArray(permissions) && typeof permissions !== 'string') {\n      throw new Error('Permissions are required.');\n    }\n\n    const _util_1$normalize3 = util_1.normalize(optionsOrCallback, callback),\n          options = _util_1$normalize3.options,\n          cb = _util_1$normalize3.callback;\n\n    const permissionsArray = arrify(permissions);\n    const req = Object.assign({\n      permissions: permissionsArray\n    }, options);\n    this.request_({\n      uri: '/iam/testPermissions',\n      qs: req,\n      useQuerystring: true\n    }, (err, resp) => {\n      if (err) {\n        cb(err, null, resp);\n        return;\n      }\n\n      const availablePermissions = arrify(resp.permissions);\n      const permissionsHash = permissionsArray.reduce((acc, permission) => {\n        acc[permission] = availablePermissions.indexOf(permission) > -1;\n        return acc;\n      }, {});\n      cb(null, permissionsHash, resp);\n    });\n  }\n\n}\n\nexports.Iam = Iam;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Iam);","map":{"version":3,"sources":["/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/@google-cloud/storage/build/src/iam.js"],"names":["Object","defineProperty","exports","value","promisify_1","require","arrify","util_1","Iam","constructor","bucket","request_","request","bind","resourceId_","getId","getPolicy","optionsOrCallback","callback","normalize","options","cb","uri","qs","setPolicy","policy","Error","method","json","assign","resourceId","testPermissions","permissions","Array","isArray","permissionsArray","req","useQuerystring","err","resp","availablePermissions","permissionsHash","reduce","acc","permission","indexOf","promisifyAll"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst arrify = require(\"arrify\");\nconst util_1 = require(\"./util\");\n/**\n * Get and set IAM policies for your Cloud Storage bucket.\n *\n * @see [Cloud Storage IAM Management](https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management)\n * @see [Granting, Changing, and Revoking Access](https://cloud.google.com/iam/docs/granting-changing-revoking-access)\n * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n *\n * @constructor Iam\n * @mixin\n *\n * @param {Bucket} bucket The parent instance.\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('my-bucket');\n * // bucket.iam\n */\nclass Iam {\n    constructor(bucket) {\n        this.request_ = bucket.request.bind(bucket);\n        this.resourceId_ = 'buckets/' + bucket.getId();\n    }\n    /**\n     * Get the IAM policy.\n     *\n     * @param {GetPolicyRequest} [options] Request options.\n     * @param {GetPolicyCallback} [callback] Callback function.\n     * @returns {Promise<GetPolicyResponse>}\n     *\n     * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/getIamPolicy}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * bucket.iam.getPolicy(function(err, policy, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.getPolicy().then(function(data) {\n     *   const policy = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_view_bucket_iam_members\n     * Example of retrieving a bucket's IAM policy:\n     */\n    getPolicy(optionsOrCallback, callback) {\n        const { options, callback: cb } = util_1.normalize(optionsOrCallback, callback);\n        this.request_({\n            uri: '/iam',\n            qs: options,\n        }, cb);\n    }\n    /**\n     * Set the IAM policy.\n     *\n     * @throws {Error} If no policy is provided.\n     *\n     * @param {Policy} policy The policy.\n     * @param {SetPolicyOptions} [options] Configuration opbject.\n     * @param {SetPolicyCallback} callback Callback function.\n     * @returns {Promise<SetPolicyResponse>}\n     *\n     * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/setIamPolicy}\n     * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * const myPolicy = {\n     *   bindings: [\n     *     {\n     *       role: 'roles/storage.admin',\n     *       members:\n     * ['serviceAccount:myotherproject@appspot.gserviceaccount.com']\n     *     }\n     *   ]\n     * };\n     *\n     * bucket.iam.setPolicy(myPolicy, function(err, policy, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.setPolicy(myPolicy).then(function(data) {\n     *   const policy = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_add_bucket_iam_member\n     * Example of adding to a bucket's IAM policy:\n     *\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_remove_bucket_iam_member\n     * Example of removing from a bucket's IAM policy:\n     */\n    setPolicy(policy, optionsOrCallback, callback) {\n        if (policy === null || typeof policy !== 'object') {\n            throw new Error('A policy object is required.');\n        }\n        const { options, callback: cb } = util_1.normalize(optionsOrCallback, callback);\n        this.request_({\n            method: 'PUT',\n            uri: '/iam',\n            json: Object.assign({\n                resourceId: this.resourceId_,\n            }, policy),\n            qs: options,\n        }, cb);\n    }\n    /**\n     * Test a set of permissions for a resource.\n     *\n     * @throws {Error} If permissions are not provided.\n     *\n     * @param {string|string[]} permissions The permission(s) to test for.\n     * @param {TestIamPermissionsOptions} [options] Configuration object.\n     * @param {TestIamPermissionsCallback} [callback] Callback function.\n     * @returns {Promise<TestIamPermissionsResponse>}\n     *\n     * @see [Buckets: testIamPermissions API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/testIamPermissions}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * //-\n     * // Test a single permission.\n     * //-\n     * const test = 'storage.buckets.delete';\n     *\n     * bucket.iam.testPermissions(test, function(err, permissions, apiResponse) {\n     *   console.log(permissions);\n     *   // {\n     *   //   \"storage.buckets.delete\": true\n     *   // }\n     * });\n     *\n     * //-\n     * // Test several permissions at once.\n     * //-\n     * const tests = [\n     *   'storage.buckets.delete',\n     *   'storage.buckets.get'\n     * ];\n     *\n     * bucket.iam.testPermissions(tests, function(err, permissions) {\n     *   console.log(permissions);\n     *   // {\n     *   //   \"storage.buckets.delete\": false,\n     *   //   \"storage.buckets.get\": true\n     *   // }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.testPermissions(test).then(function(data) {\n     *   const permissions = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n    testPermissions(permissions, optionsOrCallback, callback) {\n        if (!Array.isArray(permissions) && typeof permissions !== 'string') {\n            throw new Error('Permissions are required.');\n        }\n        const { options, callback: cb } = util_1.normalize(optionsOrCallback, callback);\n        const permissionsArray = arrify(permissions);\n        const req = Object.assign({\n            permissions: permissionsArray,\n        }, options);\n        this.request_({\n            uri: '/iam/testPermissions',\n            qs: req,\n            useQuerystring: true,\n        }, (err, resp) => {\n            if (err) {\n                cb(err, null, resp);\n                return;\n            }\n            const availablePermissions = arrify(resp.permissions);\n            const permissionsHash = permissionsArray.reduce((acc, permission) => {\n                acc[permission] = availablePermissions.indexOf(permission) > -1;\n                return acc;\n            }, {});\n            cb(null, permissionsHash, resp);\n        });\n    }\n}\nexports.Iam = Iam;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\npromisify_1.promisifyAll(Iam);\n//# sourceMappingURL=iam.js.map"]},"metadata":{},"sourceType":"script"}