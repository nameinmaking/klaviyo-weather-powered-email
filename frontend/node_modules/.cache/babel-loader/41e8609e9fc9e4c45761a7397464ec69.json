{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst assert = require(\"assert\");\n\nconst document_1 = require(\"./document\");\n\nconst logger_1 = require(\"./logger\");\n\nconst path_1 = require(\"./path\");\n\nconst reference_1 = require(\"./reference\");\n\nconst serializer_1 = require(\"./serializer\");\n\nconst timestamp_1 = require(\"./timestamp\");\n\nconst util_1 = require(\"./util\");\n\nconst validate_1 = require(\"./validate\");\n/*!\n * Google Cloud Functions terminates idle connections after two minutes. After\n * longer periods of idleness, we issue transactional commits to allow for\n * retries.\n */\n\n\nconst GCF_IDLE_TIMEOUT_MS = 110 * 1000;\n/**\n * A WriteResult wraps the write time set by the Firestore servers on sets(),\n * updates(), and creates().\n *\n * @class\n */\n\nclass WriteResult {\n  /**\n   * @hideconstructor\n   *\n   * @param _writeTime The time of the corresponding document write.\n   */\n  constructor(_writeTime) {\n    this._writeTime = _writeTime;\n  }\n  /**\n   * The write time as set by the Firestore servers.\n   *\n   * @type {Timestamp}\n   * @name WriteResult#writeTime\n   * @readonly\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.set({foo: 'bar'}).then(writeResult => {\n   *   console.log(`Document written at: ${writeResult.writeTime.toDate()}`);\n   * });\n   */\n\n\n  get writeTime() {\n    return this._writeTime;\n  }\n  /**\n   * Returns true if this `WriteResult` is equal to the provided value.\n   *\n   * @param {*} other The value to compare against.\n   * @return true if this `WriteResult` is equal to the provided value.\n   */\n\n\n  isEqual(other) {\n    return this === other || other instanceof WriteResult && this._writeTime.isEqual(other._writeTime);\n  }\n\n}\n\nexports.WriteResult = WriteResult;\n/**\n * A Firestore WriteBatch that can be used to atomically commit multiple write\n * operations at once.\n *\n * @class\n */\n\nclass WriteBatch {\n  /**\n   * @hideconstructor\n   *\n   * @param firestore The Firestore Database client.\n   */\n  constructor(firestore) {\n    /**\n     * An array of write operations that are executed as part of the commit. The\n     * resulting `api.IWrite` will be sent to the backend.\n     * @private\n     */\n    this._ops = [];\n    this._committed = false;\n    this._firestore = firestore;\n    this._serializer = new serializer_1.Serializer(firestore);\n  }\n  /**\n   * Checks if this write batch has any pending operations.\n   *\n   * @private\n   */\n\n\n  get isEmpty() {\n    return this._ops.length === 0;\n  }\n  /**\n   * Throws an error if this batch has already been committed.\n   *\n   * @private\n   */\n\n\n  verifyNotCommitted() {\n    if (this._committed) {\n      throw new Error('Cannot modify a WriteBatch that has been committed.');\n    }\n  }\n  /**\n   * Create a document with the provided object values. This will fail the batch\n   * if a document exists at its location.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * created.\n   * @param {DocumentData} data The object to serialize as the document.\n   * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n   * method calls.\n   *\n   * @example\n   * let writeBatch = firestore.batch();\n   * let documentRef = firestore.collection('col').doc();\n   *\n   * writeBatch.create(documentRef, {foo: 'bar'});\n   *\n   * writeBatch.commit().then(() => {\n   *   console.log('Successfully executed batch.');\n   * });\n   */\n\n\n  create(documentRef, data) {\n    reference_1.validateDocumentReference('documentRef', documentRef);\n    validateDocumentData('data', data,\n    /* allowDeletes= */\n    false);\n    this.verifyNotCommitted();\n    const transform = document_1.DocumentTransform.fromObject(documentRef, data);\n    transform.validate();\n    const precondition = new document_1.Precondition({\n      exists: false\n    });\n\n    const op = () => {\n      const document = document_1.DocumentSnapshot.fromObject(documentRef, data);\n      const write = !document.isEmpty || transform.isEmpty ? document.toProto() : null;\n      return {\n        write,\n        transform: transform.toProto(this._serializer),\n        precondition: precondition.toProto()\n      };\n    };\n\n    this._ops.push(op);\n\n    return this;\n  }\n  /**\n   * Deletes a document from the database.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * deleted.\n   * @param {Precondition=} precondition A precondition to enforce for this\n   * delete.\n   * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n   * document was last updated at lastUpdateTime. Fails the batch if the\n   * document doesn't exist or was last updated at a different time.\n   * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n   * method calls.\n   *\n   * @example\n   * let writeBatch = firestore.batch();\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * writeBatch.delete(documentRef);\n   *\n   * writeBatch.commit().then(() => {\n   *   console.log('Successfully executed batch.');\n   * });\n   */\n\n\n  delete(documentRef, precondition) {\n    reference_1.validateDocumentReference('documentRef', documentRef);\n    validateDeletePrecondition('precondition', precondition, {\n      optional: true\n    });\n    this.verifyNotCommitted();\n    const conditions = new document_1.Precondition(precondition);\n\n    const op = () => {\n      return {\n        write: {\n          delete: documentRef.formattedName\n        },\n        precondition: conditions.toProto()\n      };\n    };\n\n    this._ops.push(op);\n\n    return this;\n  }\n  /**\n   * Write to the document referred to by the provided\n   * [DocumentReference]{@link DocumentReference}.\n   * If the document does not exist yet, it will be created. If you pass\n   * [SetOptions]{@link SetOptions}., the provided data can be merged\n   * into the existing document.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * set.\n   * @param {DocumentData} data The object to serialize as the document.\n   * @param {SetOptions=} options An object to configure the set behavior.\n   * @param {boolean=} options.merge - If true, set() merges the values\n   * specified in its data argument. Fields omitted from this set() call\n   * remain untouched.\n   * @param {Array.<string|FieldPath>=} options.mergeFields - If provided,\n   * set() only replaces the specified field paths. Any field path that is not\n   * specified is ignored and remains untouched.\n   * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n   * method calls.\n   *\n   * @example\n   * let writeBatch = firestore.batch();\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * writeBatch.set(documentRef, {foo: 'bar'});\n   *\n   * writeBatch.commit().then(() => {\n   *   console.log('Successfully executed batch.');\n   * });\n   */\n\n\n  set(documentRef, data, options) {\n    validateSetOptions('options', options, {\n      optional: true\n    });\n    const mergeLeaves = options && options.merge === true;\n    const mergePaths = options && options.mergeFields;\n    reference_1.validateDocumentReference('documentRef', documentRef);\n    validateDocumentData('data', data,\n    /* allowDeletes= */\n    !!(mergePaths || mergeLeaves));\n    this.verifyNotCommitted();\n    let documentMask;\n\n    if (mergePaths) {\n      documentMask = document_1.DocumentMask.fromFieldMask(options.mergeFields);\n      data = documentMask.applyTo(data);\n    }\n\n    const transform = document_1.DocumentTransform.fromObject(documentRef, data);\n    transform.validate();\n\n    const op = () => {\n      const document = document_1.DocumentSnapshot.fromObject(documentRef, data);\n\n      if (mergePaths) {\n        documentMask.removeFields(transform.fields);\n      } else {\n        documentMask = document_1.DocumentMask.fromObject(data);\n      }\n\n      const hasDocumentData = !document.isEmpty || !documentMask.isEmpty;\n      let write;\n\n      if (!mergePaths && !mergeLeaves) {\n        write = document.toProto();\n      } else if (hasDocumentData || transform.isEmpty) {\n        write = document.toProto();\n        write.updateMask = documentMask.toProto();\n      }\n\n      return {\n        write,\n        transform: transform.toProto(this._serializer)\n      };\n    };\n\n    this._ops.push(op);\n\n    return this;\n  }\n  /**\n   * Update fields of the document referred to by the provided\n   * [DocumentReference]{@link DocumentReference}. If the document\n   * doesn't yet exist, the update fails and the entire batch will be rejected.\n   *\n   * The update() method accepts either an object with field paths encoded as\n   * keys and field values encoded as values, or a variable number of arguments\n   * that alternate between field paths and field values. Nested fields can be\n   * updated by providing dot-separated field path strings or by providing\n   * FieldPath objects.\n   *\n   * A Precondition restricting this update can be specified as the last\n   * argument.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * updated.\n   * @param {UpdateData|string|FieldPath} dataOrField An object\n   * containing the fields and values with which to update the document\n   * or the path of the first field to update.\n   * @param {\n   * ...(Precondition|*|string|FieldPath)} preconditionOrValues -\n   * An alternating list of field paths and values to update or a Precondition\n   * to restrict this update.\n   * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n   * method calls.\n   *\n   * @example\n   * let writeBatch = firestore.batch();\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * writeBatch.update(documentRef, {foo: 'bar'});\n   *\n   * writeBatch.commit().then(() => {\n   *   console.log('Successfully executed batch.');\n   * });\n   */\n\n\n  update(documentRef, dataOrField, ...preconditionOrValues) {\n    validate_1.validateMinNumberOfArguments('WriteBatch.update', arguments, 2);\n    reference_1.validateDocumentReference('documentRef', documentRef);\n    this.verifyNotCommitted();\n    const updateMap = new Map();\n    let precondition = new document_1.Precondition({\n      exists: true\n    });\n    const argumentError = 'Update() requires either a single JavaScript ' + 'object or an alternating list of field/value pairs that can be ' + 'followed by an optional precondition.';\n    const usesVarargs = typeof dataOrField === 'string' || dataOrField instanceof path_1.FieldPath;\n\n    if (usesVarargs) {\n      try {\n        for (let i = 1; i < arguments.length; i += 2) {\n          if (i === arguments.length - 1) {\n            validateUpdatePrecondition(i, arguments[i]);\n            precondition = new document_1.Precondition(arguments[i]);\n          } else {\n            path_1.validateFieldPath(i, arguments[i]); // Unlike the `validateMinNumberOfArguments` invocation above, this\n            // validation can be triggered both from `WriteBatch.update()` and\n            // `DocumentReference.update()`. Hence, we don't use the fully\n            // qualified API name in the error message.\n\n            validate_1.validateMinNumberOfArguments('update', arguments, i + 1);\n            const fieldPath = path_1.FieldPath.fromArgument(arguments[i]);\n            validateFieldValue(i, arguments[i + 1], fieldPath);\n            updateMap.set(fieldPath, arguments[i + 1]);\n          }\n        }\n      } catch (err) {\n        logger_1.logger('WriteBatch.update', null, 'Varargs validation failed:', err); // We catch the validation error here and re-throw to provide a better\n        // error message.\n\n        throw new Error(`${argumentError} ${err.message}`);\n      }\n    } else {\n      try {\n        validateUpdateMap('dataOrField', dataOrField);\n        validate_1.validateMaxNumberOfArguments('update', arguments, 3);\n        const data = dataOrField;\n        Object.keys(data).forEach(key => {\n          path_1.validateFieldPath(key, key);\n          updateMap.set(path_1.FieldPath.fromArgument(key), data[key]);\n        });\n\n        if (preconditionOrValues.length > 0) {\n          validateUpdatePrecondition('preconditionOrValues', preconditionOrValues[0]);\n          precondition = new document_1.Precondition(preconditionOrValues[0]);\n        }\n      } catch (err) {\n        logger_1.logger('WriteBatch.update', null, 'Non-varargs validation failed:', err); // We catch the validation error here and prefix the error with a custom\n        // message to describe the usage of update() better.\n\n        throw new Error(`${argumentError} ${err.message}`);\n      }\n    }\n\n    validateNoConflictingFields('dataOrField', updateMap);\n    const transform = document_1.DocumentTransform.fromUpdateMap(documentRef, updateMap);\n    transform.validate();\n    const documentMask = document_1.DocumentMask.fromUpdateMap(updateMap);\n\n    const op = () => {\n      const document = document_1.DocumentSnapshot.fromUpdateMap(documentRef, updateMap);\n      let write = null;\n\n      if (!document.isEmpty || !documentMask.isEmpty) {\n        write = document.toProto();\n        write.updateMask = documentMask.toProto();\n      }\n\n      return {\n        write,\n        transform: transform.toProto(this._serializer),\n        precondition: precondition.toProto()\n      };\n    };\n\n    this._ops.push(op);\n\n    return this;\n  }\n  /**\n   * Atomically commits all pending operations to the database and verifies all\n   * preconditions. Fails the entire write if any precondition is not met.\n   *\n   * @returns {Promise.<Array.<WriteResult>>} A Promise that resolves\n   * when this batch completes.\n   *\n   * @example\n   * let writeBatch = firestore.batch();\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * writeBatch.set(documentRef, {foo: 'bar'});\n   *\n   * writeBatch.commit().then(() => {\n   *   console.log('Successfully executed batch.');\n   * });\n   */\n\n\n  commit() {\n    return this.commit_();\n  }\n  /**\n   * Commit method that takes an optional transaction ID.\n   *\n   * @private\n   * @param commitOptions Options to use for this commit.\n   * @param commitOptions.transactionId The transaction ID of this commit.\n   * @param commitOptions.requestTag A unique client-assigned identifier for\n   * this request.\n   * @returns  A Promise that resolves when this batch completes.\n   */\n\n\n  async commit_(commitOptions) {\n    // Note: We don't call `verifyNotCommitted()` to allow for retries.\n    this._committed = true;\n    const tag = commitOptions && commitOptions.requestTag || util_1.requestTag();\n    await this._firestore.initializeIfNeeded(tag);\n    const database = this._firestore.formattedName;\n    const request = {\n      database\n    }; // On GCF, we periodically force transactional commits to allow for\n    // request retries in case GCF closes our backend connection.\n\n    const explicitTransaction = commitOptions && commitOptions.transactionId;\n\n    if (!explicitTransaction && this._shouldCreateTransaction()) {\n      logger_1.logger('WriteBatch.commit', tag, 'Using transaction for commit');\n      return this._firestore.request('beginTransaction', request, tag, true).then(resp => {\n        return this.commit_({\n          transactionId: resp.transaction\n        });\n      });\n    }\n\n    const writes = this._ops.map(op => op());\n\n    request.writes = [];\n\n    for (const req of writes) {\n      assert(req.write || req.transform, 'Either a write or transform must be set');\n\n      if (req.precondition) {\n        (req.write || req.transform).currentDocument = req.precondition;\n      }\n\n      if (req.write) {\n        request.writes.push(req.write);\n      }\n\n      if (req.transform) {\n        request.writes.push(req.transform);\n      }\n    }\n\n    logger_1.logger('WriteBatch.commit', tag, 'Sending %d writes', request.writes.length);\n\n    if (explicitTransaction) {\n      request.transaction = explicitTransaction;\n    }\n\n    return this._firestore.request('commit', request, tag,\n    /* allowRetries= */\n    false).then(resp => {\n      const writeResults = [];\n\n      if (request.writes.length > 0) {\n        assert(Array.isArray(resp.writeResults) && request.writes.length === resp.writeResults.length, `Expected one write result per operation, but got ${resp.writeResults.length} results for ${request.writes.length} operations.`);\n        const commitTime = timestamp_1.Timestamp.fromProto(resp.commitTime);\n        let offset = 0;\n\n        for (let i = 0; i < writes.length; ++i) {\n          const writeRequest = writes[i]; // Don't return two write results for a write that contains a\n          // transform, as the fact that we have to split one write\n          // operation into two distinct write requests is an implementation\n          // detail.\n\n          if (writeRequest.write && writeRequest.transform) {\n            // The document transform is always sent last and produces the\n            // latest update time.\n            ++offset;\n          }\n\n          const writeResult = resp.writeResults[i + offset];\n          writeResults.push(new WriteResult(writeResult.updateTime ? timestamp_1.Timestamp.fromProto(writeResult.updateTime) : commitTime));\n        }\n      }\n\n      return writeResults;\n    });\n  }\n  /**\n   * Determines whether we should issue a transactional commit. On GCF, this\n   * happens after two minutes of idleness.\n   *\n   * @private\n   * @returns Whether to use a transaction.\n   */\n\n\n  _shouldCreateTransaction() {\n    if (!this._firestore._preferTransactions) {\n      return false;\n    }\n\n    if (this._firestore._lastSuccessfulRequest) {\n      const now = new Date().getTime();\n      return now - this._firestore._lastSuccessfulRequest > GCF_IDLE_TIMEOUT_MS;\n    }\n\n    return true;\n  }\n\n}\n\nexports.WriteBatch = WriteBatch;\n/**\n * Validates the use of 'value' as a Precondition and enforces that 'exists'\n * and 'lastUpdateTime' use valid types.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate\n * @param allowExists Whether to allow the 'exists' preconditions.\n */\n\nfunction validatePrecondition(arg, value, allowExists) {\n  if (typeof value !== 'object' || value === null) {\n    throw new Error('Input is not an object.');\n  }\n\n  const precondition = value;\n  let conditions = 0;\n\n  if (precondition.exists !== undefined) {\n    ++conditions;\n\n    if (!allowExists) {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, 'precondition')} \"exists\" is not an allowed precondition.`);\n    }\n\n    if (typeof precondition.exists !== 'boolean') {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, 'precondition')} \"exists\" is not a boolean.'`);\n    }\n  }\n\n  if (precondition.lastUpdateTime !== undefined) {\n    ++conditions;\n\n    if (!(precondition.lastUpdateTime instanceof timestamp_1.Timestamp)) {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, 'precondition')} \"lastUpdateTime\" is not a Firestore Timestamp.`);\n    }\n  }\n\n  if (conditions > 1) {\n    throw new Error(`${validate_1.invalidArgumentMessage(arg, 'precondition')} Input specifies more than one precondition.`);\n  }\n}\n/**\n * Validates the use of 'value' as an update Precondition.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n */\n\n\nfunction validateUpdatePrecondition(arg, value, options) {\n  if (!validate_1.validateOptional(value, options)) {\n    validatePrecondition(arg, value,\n    /* allowExists= */\n    false);\n  }\n}\n/**\n * Validates the use of 'value' as a delete Precondition.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n */\n\n\nfunction validateDeletePrecondition(arg, value, options) {\n  if (!validate_1.validateOptional(value, options)) {\n    validatePrecondition(arg, value,\n    /* allowExists= */\n    true);\n  }\n}\n/**\n * Validates the use of 'value' as SetOptions and enforces that 'merge' is a\n * boolean.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n * @throws if the input is not a valid SetOptions object.\n */\n\n\nfunction validateSetOptions(arg, value, options) {\n  if (!validate_1.validateOptional(value, options)) {\n    if (!util_1.isObject(value)) {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, 'set() options argument')} Input is not an object.`);\n    }\n\n    const setOptions = value;\n\n    if ('merge' in setOptions && typeof setOptions.merge !== 'boolean') {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, 'set() options argument')} \"merge\" is not a boolean.`);\n    }\n\n    if ('mergeFields' in setOptions) {\n      if (!Array.isArray(setOptions.mergeFields)) {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'set() options argument')} \"mergeFields\" is not an array.`);\n      }\n\n      for (let i = 0; i < setOptions.mergeFields.length; ++i) {\n        try {\n          path_1.validateFieldPath(i, setOptions.mergeFields[i]);\n        } catch (err) {\n          throw new Error(`${validate_1.invalidArgumentMessage(arg, 'set() options argument')} \"mergeFields\" is not valid: ${err.message}`);\n        }\n      }\n    }\n\n    if ('merge' in setOptions && 'mergeFields' in setOptions) {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, 'set() options argument')} You cannot specify both \"merge\" and \"mergeFields\".`);\n    }\n  }\n}\n\nexports.validateSetOptions = validateSetOptions;\n/**\n * Validates a JavaScript object for usage as a Firestore document.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param obj JavaScript object to validate.\n * @param allowDeletes Whether to allow FieldValue.delete() sentinels.\n * @throws when the object is invalid.\n */\n\nfunction validateDocumentData(arg, obj, allowDeletes) {\n  if (!serializer_1.isPlainObject(obj)) {\n    throw new Error(validate_1.customObjectMessage(arg, obj));\n  }\n\n  for (const prop of Object.keys(obj)) {\n    serializer_1.validateUserInput(arg, obj[prop], 'Firestore document', {\n      allowDeletes: allowDeletes ? 'all' : 'none',\n      allowTransforms: true\n    }, new path_1.FieldPath(prop));\n  }\n}\n\nexports.validateDocumentData = validateDocumentData;\n/**\n * Validates that a value can be used as field value during an update.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param val The value to verify.\n * @param path The path to show in the error message.\n */\n\nfunction validateFieldValue(arg, val, path) {\n  serializer_1.validateUserInput(arg, val, 'Firestore value', {\n    allowDeletes: 'root',\n    allowTransforms: true\n  }, path);\n}\n\nexports.validateFieldValue = validateFieldValue;\n/**\n * Validates that the update data does not contain any ambiguous field\n * definitions (such as 'a.b' and 'a').\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param data An update map with field/value pairs.\n */\n\nfunction validateNoConflictingFields(arg, data) {\n  const fields = [];\n  data.forEach((value, key) => {\n    fields.push(key);\n  });\n  fields.sort((left, right) => left.compareTo(right));\n\n  for (let i = 1; i < fields.length; ++i) {\n    if (fields[i - 1].isPrefixOf(fields[i])) {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, 'update map')} Field \"${fields[i - 1]}\" was specified multiple times.`);\n    }\n  }\n}\n/**\n * Validates that a JavaScript object is a map of field paths to field values.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param obj JavaScript object to validate.\n * @throws when the object is invalid.\n */\n\n\nfunction validateUpdateMap(arg, obj) {\n  if (!serializer_1.isPlainObject(obj)) {\n    throw new Error(validate_1.customObjectMessage(arg, obj));\n  }\n\n  let isEmpty = true;\n\n  if (obj) {\n    for (const prop of Object.keys(obj)) {\n      isEmpty = false;\n      validateFieldValue(arg, obj[prop], new path_1.FieldPath(prop));\n    }\n  }\n\n  if (isEmpty) {\n    throw new Error('At least one field must be updated.');\n  }\n}","map":{"version":3,"sources":["/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/@google-cloud/firestore/build/src/write-batch.js"],"names":["Object","defineProperty","exports","value","assert","require","document_1","logger_1","path_1","reference_1","serializer_1","timestamp_1","util_1","validate_1","GCF_IDLE_TIMEOUT_MS","WriteResult","constructor","_writeTime","writeTime","isEqual","other","WriteBatch","firestore","_ops","_committed","_firestore","_serializer","Serializer","isEmpty","length","verifyNotCommitted","Error","create","documentRef","data","validateDocumentReference","validateDocumentData","transform","DocumentTransform","fromObject","validate","precondition","Precondition","exists","op","document","DocumentSnapshot","write","toProto","push","delete","validateDeletePrecondition","optional","conditions","formattedName","set","options","validateSetOptions","mergeLeaves","merge","mergePaths","mergeFields","documentMask","DocumentMask","fromFieldMask","applyTo","removeFields","fields","hasDocumentData","updateMask","update","dataOrField","preconditionOrValues","validateMinNumberOfArguments","arguments","updateMap","Map","argumentError","usesVarargs","FieldPath","i","validateUpdatePrecondition","validateFieldPath","fieldPath","fromArgument","validateFieldValue","err","logger","message","validateUpdateMap","validateMaxNumberOfArguments","keys","forEach","key","validateNoConflictingFields","fromUpdateMap","commit","commit_","commitOptions","tag","requestTag","initializeIfNeeded","database","request","explicitTransaction","transactionId","_shouldCreateTransaction","then","resp","transaction","writes","map","req","currentDocument","writeResults","Array","isArray","commitTime","Timestamp","fromProto","offset","writeRequest","writeResult","updateTime","_preferTransactions","_lastSuccessfulRequest","now","Date","getTime","validatePrecondition","arg","allowExists","undefined","invalidArgumentMessage","lastUpdateTime","validateOptional","isObject","setOptions","obj","allowDeletes","isPlainObject","customObjectMessage","prop","validateUserInput","allowTransforms","val","path","sort","left","right","compareTo","isPrefixOf"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;AAeAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMK,YAAY,GAAGL,OAAO,CAAC,cAAD,CAA5B;;AACA,MAAMM,WAAW,GAAGN,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMO,MAAM,GAAGP,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMQ,UAAU,GAAGR,OAAO,CAAC,YAAD,CAA1B;AACA;;;;;;;AAKA,MAAMS,mBAAmB,GAAG,MAAM,IAAlC;AACA;;;;;;;AAMA,MAAMC,WAAN,CAAkB;AACd;;;;;AAKAC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKA,UAAL,GAAkBA,UAAlB;AACH;AACD;;;;;;;;;;;;;;;;AAcA,MAAIC,SAAJ,GAAgB;AACZ,WAAO,KAAKD,UAAZ;AACH;AACD;;;;;;;;AAMAE,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACX,WAAQ,SAASA,KAAT,IACHA,KAAK,YAAYL,WAAjB,IACG,KAAKE,UAAL,CAAgBE,OAAhB,CAAwBC,KAAK,CAACH,UAA9B,CAFR;AAGH;;AApCa;;AAsClBf,OAAO,CAACa,WAAR,GAAsBA,WAAtB;AACA;;;;;;;AAMA,MAAMM,UAAN,CAAiB;AACb;;;;;AAKAL,EAAAA,WAAW,CAACM,SAAD,EAAY;AACnB;;;;;AAKA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKC,UAAL,GAAkBH,SAAlB;AACA,SAAKI,WAAL,GAAmB,IAAIhB,YAAY,CAACiB,UAAjB,CAA4BL,SAA5B,CAAnB;AACH;AACD;;;;;;;AAKA,MAAIM,OAAJ,GAAc;AACV,WAAO,KAAKL,IAAL,CAAUM,MAAV,KAAqB,CAA5B;AACH;AACD;;;;;;;AAKAC,EAAAA,kBAAkB,GAAG;AACjB,QAAI,KAAKN,UAAT,EAAqB;AACjB,YAAM,IAAIO,KAAJ,CAAU,qDAAV,CAAN;AACH;AACJ;AACD;;;;;;;;;;;;;;;;;;;;;;AAoBAC,EAAAA,MAAM,CAACC,WAAD,EAAcC,IAAd,EAAoB;AACtBzB,IAAAA,WAAW,CAAC0B,yBAAZ,CAAsC,aAAtC,EAAqDF,WAArD;AACAG,IAAAA,oBAAoB,CAAC,MAAD,EAASF,IAAT;AAAe;AAAoB,SAAnC,CAApB;AACA,SAAKJ,kBAAL;AACA,UAAMO,SAAS,GAAG/B,UAAU,CAACgC,iBAAX,CAA6BC,UAA7B,CAAwCN,WAAxC,EAAqDC,IAArD,CAAlB;AACAG,IAAAA,SAAS,CAACG,QAAV;AACA,UAAMC,YAAY,GAAG,IAAInC,UAAU,CAACoC,YAAf,CAA4B;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAA5B,CAArB;;AACA,UAAMC,EAAE,GAAG,MAAM;AACb,YAAMC,QAAQ,GAAGvC,UAAU,CAACwC,gBAAX,CAA4BP,UAA5B,CAAuCN,WAAvC,EAAoDC,IAApD,CAAjB;AACA,YAAMa,KAAK,GAAG,CAACF,QAAQ,CAACjB,OAAV,IAAqBS,SAAS,CAACT,OAA/B,GAAyCiB,QAAQ,CAACG,OAAT,EAAzC,GAA8D,IAA5E;AACA,aAAO;AACHD,QAAAA,KADG;AAEHV,QAAAA,SAAS,EAAEA,SAAS,CAACW,OAAV,CAAkB,KAAKtB,WAAvB,CAFR;AAGHe,QAAAA,YAAY,EAAEA,YAAY,CAACO,OAAb;AAHX,OAAP;AAKH,KARD;;AASA,SAAKzB,IAAL,CAAU0B,IAAV,CAAeL,EAAf;;AACA,WAAO,IAAP;AACH;AACD;;;;;;;;;;;;;;;;;;;;;;;;;AAuBAM,EAAAA,MAAM,CAACjB,WAAD,EAAcQ,YAAd,EAA4B;AAC9BhC,IAAAA,WAAW,CAAC0B,yBAAZ,CAAsC,aAAtC,EAAqDF,WAArD;AACAkB,IAAAA,0BAA0B,CAAC,cAAD,EAAiBV,YAAjB,EAA+B;AAAEW,MAAAA,QAAQ,EAAE;AAAZ,KAA/B,CAA1B;AACA,SAAKtB,kBAAL;AACA,UAAMuB,UAAU,GAAG,IAAI/C,UAAU,CAACoC,YAAf,CAA4BD,YAA5B,CAAnB;;AACA,UAAMG,EAAE,GAAG,MAAM;AACb,aAAO;AACHG,QAAAA,KAAK,EAAE;AACHG,UAAAA,MAAM,EAAEjB,WAAW,CAACqB;AADjB,SADJ;AAIHb,QAAAA,YAAY,EAAEY,UAAU,CAACL,OAAX;AAJX,OAAP;AAMH,KAPD;;AAQA,SAAKzB,IAAL,CAAU0B,IAAV,CAAeL,EAAf;;AACA,WAAO,IAAP;AACH;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BAW,EAAAA,GAAG,CAACtB,WAAD,EAAcC,IAAd,EAAoBsB,OAApB,EAA6B;AAC5BC,IAAAA,kBAAkB,CAAC,SAAD,EAAYD,OAAZ,EAAqB;AAAEJ,MAAAA,QAAQ,EAAE;AAAZ,KAArB,CAAlB;AACA,UAAMM,WAAW,GAAGF,OAAO,IAAIA,OAAO,CAACG,KAAR,KAAkB,IAAjD;AACA,UAAMC,UAAU,GAAGJ,OAAO,IAAIA,OAAO,CAACK,WAAtC;AACApD,IAAAA,WAAW,CAAC0B,yBAAZ,CAAsC,aAAtC,EAAqDF,WAArD;AACAG,IAAAA,oBAAoB,CAAC,MAAD,EAASF,IAAT;AACpB;AAAoB,KAAC,EAAE0B,UAAU,IAAIF,WAAhB,CADD,CAApB;AAEA,SAAK5B,kBAAL;AACA,QAAIgC,YAAJ;;AACA,QAAIF,UAAJ,EAAgB;AACZE,MAAAA,YAAY,GAAGxD,UAAU,CAACyD,YAAX,CAAwBC,aAAxB,CAAsCR,OAAO,CAACK,WAA9C,CAAf;AACA3B,MAAAA,IAAI,GAAG4B,YAAY,CAACG,OAAb,CAAqB/B,IAArB,CAAP;AACH;;AACD,UAAMG,SAAS,GAAG/B,UAAU,CAACgC,iBAAX,CAA6BC,UAA7B,CAAwCN,WAAxC,EAAqDC,IAArD,CAAlB;AACAG,IAAAA,SAAS,CAACG,QAAV;;AACA,UAAMI,EAAE,GAAG,MAAM;AACb,YAAMC,QAAQ,GAAGvC,UAAU,CAACwC,gBAAX,CAA4BP,UAA5B,CAAuCN,WAAvC,EAAoDC,IAApD,CAAjB;;AACA,UAAI0B,UAAJ,EAAgB;AACZE,QAAAA,YAAY,CAACI,YAAb,CAA0B7B,SAAS,CAAC8B,MAApC;AACH,OAFD,MAGK;AACDL,QAAAA,YAAY,GAAGxD,UAAU,CAACyD,YAAX,CAAwBxB,UAAxB,CAAmCL,IAAnC,CAAf;AACH;;AACD,YAAMkC,eAAe,GAAG,CAACvB,QAAQ,CAACjB,OAAV,IAAqB,CAACkC,YAAY,CAAClC,OAA3D;AACA,UAAImB,KAAJ;;AACA,UAAI,CAACa,UAAD,IAAe,CAACF,WAApB,EAAiC;AAC7BX,QAAAA,KAAK,GAAGF,QAAQ,CAACG,OAAT,EAAR;AACH,OAFD,MAGK,IAAIoB,eAAe,IAAI/B,SAAS,CAACT,OAAjC,EAA0C;AAC3CmB,QAAAA,KAAK,GAAGF,QAAQ,CAACG,OAAT,EAAR;AACAD,QAAAA,KAAK,CAACsB,UAAN,GAAmBP,YAAY,CAACd,OAAb,EAAnB;AACH;;AACD,aAAO;AACHD,QAAAA,KADG;AAEHV,QAAAA,SAAS,EAAEA,SAAS,CAACW,OAAV,CAAkB,KAAKtB,WAAvB;AAFR,OAAP;AAIH,KArBD;;AAsBA,SAAKH,IAAL,CAAU0B,IAAV,CAAeL,EAAf;;AACA,WAAO,IAAP;AACH;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA0B,EAAAA,MAAM,CAACrC,WAAD,EAAcsC,WAAd,EAA2B,GAAGC,oBAA9B,EAAoD;AACtD3D,IAAAA,UAAU,CAAC4D,4BAAX,CAAwC,mBAAxC,EAA6DC,SAA7D,EAAwE,CAAxE;AACAjE,IAAAA,WAAW,CAAC0B,yBAAZ,CAAsC,aAAtC,EAAqDF,WAArD;AACA,SAAKH,kBAAL;AACA,UAAM6C,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AACA,QAAInC,YAAY,GAAG,IAAInC,UAAU,CAACoC,YAAf,CAA4B;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAA5B,CAAnB;AACA,UAAMkC,aAAa,GAAG,kDAClB,iEADkB,GAElB,uCAFJ;AAGA,UAAMC,WAAW,GAAG,OAAOP,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,YAAY/D,MAAM,CAACuE,SAArF;;AACA,QAAID,WAAJ,EAAiB;AACb,UAAI;AACA,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,SAAS,CAAC7C,MAA9B,EAAsCmD,CAAC,IAAI,CAA3C,EAA8C;AAC1C,cAAIA,CAAC,KAAKN,SAAS,CAAC7C,MAAV,GAAmB,CAA7B,EAAgC;AAC5BoD,YAAAA,0BAA0B,CAACD,CAAD,EAAIN,SAAS,CAACM,CAAD,CAAb,CAA1B;AACAvC,YAAAA,YAAY,GAAG,IAAInC,UAAU,CAACoC,YAAf,CAA4BgC,SAAS,CAACM,CAAD,CAArC,CAAf;AACH,WAHD,MAIK;AACDxE,YAAAA,MAAM,CAAC0E,iBAAP,CAAyBF,CAAzB,EAA4BN,SAAS,CAACM,CAAD,CAArC,EADC,CAED;AACA;AACA;AACA;;AACAnE,YAAAA,UAAU,CAAC4D,4BAAX,CAAwC,QAAxC,EAAkDC,SAAlD,EAA6DM,CAAC,GAAG,CAAjE;AACA,kBAAMG,SAAS,GAAG3E,MAAM,CAACuE,SAAP,CAAiBK,YAAjB,CAA8BV,SAAS,CAACM,CAAD,CAAvC,CAAlB;AACAK,YAAAA,kBAAkB,CAACL,CAAD,EAAIN,SAAS,CAACM,CAAC,GAAG,CAAL,CAAb,EAAsBG,SAAtB,CAAlB;AACAR,YAAAA,SAAS,CAACpB,GAAV,CAAc4B,SAAd,EAAyBT,SAAS,CAACM,CAAC,GAAG,CAAL,CAAlC;AACH;AACJ;AACJ,OAlBD,CAmBA,OAAOM,GAAP,EAAY;AACR/E,QAAAA,QAAQ,CAACgF,MAAT,CAAgB,mBAAhB,EAAqC,IAArC,EAA2C,4BAA3C,EAAyED,GAAzE,EADQ,CAER;AACA;;AACA,cAAM,IAAIvD,KAAJ,CAAW,GAAE8C,aAAc,IAAGS,GAAG,CAACE,OAAQ,EAA1C,CAAN;AACH;AACJ,KA1BD,MA2BK;AACD,UAAI;AACAC,QAAAA,iBAAiB,CAAC,aAAD,EAAgBlB,WAAhB,CAAjB;AACA1D,QAAAA,UAAU,CAAC6E,4BAAX,CAAwC,QAAxC,EAAkDhB,SAAlD,EAA6D,CAA7D;AACA,cAAMxC,IAAI,GAAGqC,WAAb;AACAvE,QAAAA,MAAM,CAAC2F,IAAP,CAAYzD,IAAZ,EAAkB0D,OAAlB,CAA0BC,GAAG,IAAI;AAC7BrF,UAAAA,MAAM,CAAC0E,iBAAP,CAAyBW,GAAzB,EAA8BA,GAA9B;AACAlB,UAAAA,SAAS,CAACpB,GAAV,CAAc/C,MAAM,CAACuE,SAAP,CAAiBK,YAAjB,CAA8BS,GAA9B,CAAd,EAAkD3D,IAAI,CAAC2D,GAAD,CAAtD;AACH,SAHD;;AAIA,YAAIrB,oBAAoB,CAAC3C,MAArB,GAA8B,CAAlC,EAAqC;AACjCoD,UAAAA,0BAA0B,CAAC,sBAAD,EAAyBT,oBAAoB,CAAC,CAAD,CAA7C,CAA1B;AACA/B,UAAAA,YAAY,GAAG,IAAInC,UAAU,CAACoC,YAAf,CAA4B8B,oBAAoB,CAAC,CAAD,CAAhD,CAAf;AACH;AACJ,OAZD,CAaA,OAAOc,GAAP,EAAY;AACR/E,QAAAA,QAAQ,CAACgF,MAAT,CAAgB,mBAAhB,EAAqC,IAArC,EAA2C,gCAA3C,EAA6ED,GAA7E,EADQ,CAER;AACA;;AACA,cAAM,IAAIvD,KAAJ,CAAW,GAAE8C,aAAc,IAAGS,GAAG,CAACE,OAAQ,EAA1C,CAAN;AACH;AACJ;;AACDM,IAAAA,2BAA2B,CAAC,aAAD,EAAgBnB,SAAhB,CAA3B;AACA,UAAMtC,SAAS,GAAG/B,UAAU,CAACgC,iBAAX,CAA6ByD,aAA7B,CAA2C9D,WAA3C,EAAwD0C,SAAxD,CAAlB;AACAtC,IAAAA,SAAS,CAACG,QAAV;AACA,UAAMsB,YAAY,GAAGxD,UAAU,CAACyD,YAAX,CAAwBgC,aAAxB,CAAsCpB,SAAtC,CAArB;;AACA,UAAM/B,EAAE,GAAG,MAAM;AACb,YAAMC,QAAQ,GAAGvC,UAAU,CAACwC,gBAAX,CAA4BiD,aAA5B,CAA0C9D,WAA1C,EAAuD0C,SAAvD,CAAjB;AACA,UAAI5B,KAAK,GAAG,IAAZ;;AACA,UAAI,CAACF,QAAQ,CAACjB,OAAV,IAAqB,CAACkC,YAAY,CAAClC,OAAvC,EAAgD;AAC5CmB,QAAAA,KAAK,GAAGF,QAAQ,CAACG,OAAT,EAAR;AACAD,QAAAA,KAAK,CAACsB,UAAN,GAAmBP,YAAY,CAACd,OAAb,EAAnB;AACH;;AACD,aAAO;AACHD,QAAAA,KADG;AAEHV,QAAAA,SAAS,EAAEA,SAAS,CAACW,OAAV,CAAkB,KAAKtB,WAAvB,CAFR;AAGHe,QAAAA,YAAY,EAAEA,YAAY,CAACO,OAAb;AAHX,OAAP;AAKH,KAZD;;AAaA,SAAKzB,IAAL,CAAU0B,IAAV,CAAeL,EAAf;;AACA,WAAO,IAAP;AACH;AACD;;;;;;;;;;;;;;;;;;;AAiBAoD,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKC,OAAL,EAAP;AACH;AACD;;;;;;;;;;;;AAUA,QAAMA,OAAN,CAAcC,aAAd,EAA6B;AACzB;AACA,SAAK1E,UAAL,GAAkB,IAAlB;AACA,UAAM2E,GAAG,GAAID,aAAa,IAAIA,aAAa,CAACE,UAAhC,IAA+CxF,MAAM,CAACwF,UAAP,EAA3D;AACA,UAAM,KAAK3E,UAAL,CAAgB4E,kBAAhB,CAAmCF,GAAnC,CAAN;AACA,UAAMG,QAAQ,GAAG,KAAK7E,UAAL,CAAgB6B,aAAjC;AACA,UAAMiD,OAAO,GAAG;AAAED,MAAAA;AAAF,KAAhB,CANyB,CAOzB;AACA;;AACA,UAAME,mBAAmB,GAAGN,aAAa,IAAIA,aAAa,CAACO,aAA3D;;AACA,QAAI,CAACD,mBAAD,IAAwB,KAAKE,wBAAL,EAA5B,EAA6D;AACzDnG,MAAAA,QAAQ,CAACgF,MAAT,CAAgB,mBAAhB,EAAqCY,GAArC,EAA0C,8BAA1C;AACA,aAAO,KAAK1E,UAAL,CACF8E,OADE,CACM,kBADN,EAC0BA,OAD1B,EACmCJ,GADnC,EACwC,IADxC,EAEFQ,IAFE,CAEGC,IAAI,IAAI;AACd,eAAO,KAAKX,OAAL,CAAa;AAAEQ,UAAAA,aAAa,EAAEG,IAAI,CAACC;AAAtB,SAAb,CAAP;AACH,OAJM,CAAP;AAKH;;AACD,UAAMC,MAAM,GAAG,KAAKvF,IAAL,CAAUwF,GAAV,CAAcnE,EAAE,IAAIA,EAAE,EAAtB,CAAf;;AACA2D,IAAAA,OAAO,CAACO,MAAR,GAAiB,EAAjB;;AACA,SAAK,MAAME,GAAX,IAAkBF,MAAlB,EAA0B;AACtB1G,MAAAA,MAAM,CAAC4G,GAAG,CAACjE,KAAJ,IAAaiE,GAAG,CAAC3E,SAAlB,EAA6B,yCAA7B,CAAN;;AACA,UAAI2E,GAAG,CAACvE,YAAR,EAAsB;AAClB,SAACuE,GAAG,CAACjE,KAAJ,IAAaiE,GAAG,CAAC3E,SAAlB,EAA6B4E,eAA7B,GAA+CD,GAAG,CAACvE,YAAnD;AACH;;AACD,UAAIuE,GAAG,CAACjE,KAAR,EAAe;AACXwD,QAAAA,OAAO,CAACO,MAAR,CAAe7D,IAAf,CAAoB+D,GAAG,CAACjE,KAAxB;AACH;;AACD,UAAIiE,GAAG,CAAC3E,SAAR,EAAmB;AACfkE,QAAAA,OAAO,CAACO,MAAR,CAAe7D,IAAf,CAAoB+D,GAAG,CAAC3E,SAAxB;AACH;AACJ;;AACD9B,IAAAA,QAAQ,CAACgF,MAAT,CAAgB,mBAAhB,EAAqCY,GAArC,EAA0C,mBAA1C,EAA+DI,OAAO,CAACO,MAAR,CAAejF,MAA9E;;AACA,QAAI2E,mBAAJ,EAAyB;AACrBD,MAAAA,OAAO,CAACM,WAAR,GAAsBL,mBAAtB;AACH;;AACD,WAAO,KAAK/E,UAAL,CACF8E,OADE,CACM,QADN,EACgBA,OADhB,EACyBJ,GADzB;AAEP;AAAoB,SAFb,EAGFQ,IAHE,CAGGC,IAAI,IAAI;AACd,YAAMM,YAAY,GAAG,EAArB;;AACA,UAAIX,OAAO,CAACO,MAAR,CAAejF,MAAf,GAAwB,CAA5B,EAA+B;AAC3BzB,QAAAA,MAAM,CAAC+G,KAAK,CAACC,OAAN,CAAcR,IAAI,CAACM,YAAnB,KACHX,OAAO,CAACO,MAAR,CAAejF,MAAf,KAA0B+E,IAAI,CAACM,YAAL,CAAkBrF,MAD1C,EACmD,oDAAmD+E,IAAI,CAACM,YAAL,CAAkBrF,MAAO,gBAAe0E,OAAO,CAACO,MAAR,CAAejF,MAAO,cADpK,CAAN;AAEA,cAAMwF,UAAU,GAAG1G,WAAW,CAAC2G,SAAZ,CAAsBC,SAAtB,CAAgCX,IAAI,CAACS,UAArC,CAAnB;AACA,YAAIG,MAAM,GAAG,CAAb;;AACA,aAAK,IAAIxC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8B,MAAM,CAACjF,MAA3B,EAAmC,EAAEmD,CAArC,EAAwC;AACpC,gBAAMyC,YAAY,GAAGX,MAAM,CAAC9B,CAAD,CAA3B,CADoC,CAEpC;AACA;AACA;AACA;;AACA,cAAIyC,YAAY,CAAC1E,KAAb,IAAsB0E,YAAY,CAACpF,SAAvC,EAAkD;AAC9C;AACA;AACA,cAAEmF,MAAF;AACH;;AACD,gBAAME,WAAW,GAAGd,IAAI,CAACM,YAAL,CAAkBlC,CAAC,GAAGwC,MAAtB,CAApB;AACAN,UAAAA,YAAY,CAACjE,IAAb,CAAkB,IAAIlC,WAAJ,CAAgB2G,WAAW,CAACC,UAAZ,GAC5BhH,WAAW,CAAC2G,SAAZ,CAAsBC,SAAtB,CAAgCG,WAAW,CAACC,UAA5C,CAD4B,GAE5BN,UAFY,CAAlB;AAGH;AACJ;;AACD,aAAOH,YAAP;AACH,KA5BM,CAAP;AA6BH;AACD;;;;;;;;;AAOAR,EAAAA,wBAAwB,GAAG;AACvB,QAAI,CAAC,KAAKjF,UAAL,CAAgBmG,mBAArB,EAA0C;AACtC,aAAO,KAAP;AACH;;AACD,QAAI,KAAKnG,UAAL,CAAgBoG,sBAApB,EAA4C;AACxC,YAAMC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;AACA,aAAOF,GAAG,GAAG,KAAKrG,UAAL,CAAgBoG,sBAAtB,GAA+C/G,mBAAtD;AACH;;AACD,WAAO,IAAP;AACH;;AAzZY;;AA2ZjBZ,OAAO,CAACmB,UAAR,GAAqBA,UAArB;AACA;;;;;;;;;;AASA,SAAS4G,oBAAT,CAA8BC,GAA9B,EAAmC/H,KAAnC,EAA0CgI,WAA1C,EAAuD;AACnD,MAAI,OAAOhI,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;AAC7C,UAAM,IAAI4B,KAAJ,CAAU,yBAAV,CAAN;AACH;;AACD,QAAMU,YAAY,GAAGtC,KAArB;AACA,MAAIkD,UAAU,GAAG,CAAjB;;AACA,MAAIZ,YAAY,CAACE,MAAb,KAAwByF,SAA5B,EAAuC;AACnC,MAAE/E,UAAF;;AACA,QAAI,CAAC8E,WAAL,EAAkB;AACd,YAAM,IAAIpG,KAAJ,CAAW,GAAElB,UAAU,CAACwH,sBAAX,CAAkCH,GAAlC,EAAuC,cAAvC,CAAuD,2CAApE,CAAN;AACH;;AACD,QAAI,OAAOzF,YAAY,CAACE,MAApB,KAA+B,SAAnC,EAA8C;AAC1C,YAAM,IAAIZ,KAAJ,CAAW,GAAElB,UAAU,CAACwH,sBAAX,CAAkCH,GAAlC,EAAuC,cAAvC,CAAuD,8BAApE,CAAN;AACH;AACJ;;AACD,MAAIzF,YAAY,CAAC6F,cAAb,KAAgCF,SAApC,EAA+C;AAC3C,MAAE/E,UAAF;;AACA,QAAI,EAAEZ,YAAY,CAAC6F,cAAb,YAAuC3H,WAAW,CAAC2G,SAArD,CAAJ,EAAqE;AACjE,YAAM,IAAIvF,KAAJ,CAAW,GAAElB,UAAU,CAACwH,sBAAX,CAAkCH,GAAlC,EAAuC,cAAvC,CAAuD,iDAApE,CAAN;AACH;AACJ;;AACD,MAAI7E,UAAU,GAAG,CAAjB,EAAoB;AAChB,UAAM,IAAItB,KAAJ,CAAW,GAAElB,UAAU,CAACwH,sBAAX,CAAkCH,GAAlC,EAAuC,cAAvC,CAAuD,8CAApE,CAAN;AACH;AACJ;AACD;;;;;;;;;;;AASA,SAASjD,0BAAT,CAAoCiD,GAApC,EAAyC/H,KAAzC,EAAgDqD,OAAhD,EAAyD;AACrD,MAAI,CAAC3C,UAAU,CAAC0H,gBAAX,CAA4BpI,KAA5B,EAAmCqD,OAAnC,CAAL,EAAkD;AAC9CyE,IAAAA,oBAAoB,CAACC,GAAD,EAAM/H,KAAN;AAAa;AAAmB,SAAhC,CAApB;AACH;AACJ;AACD;;;;;;;;;;;AASA,SAASgD,0BAAT,CAAoC+E,GAApC,EAAyC/H,KAAzC,EAAgDqD,OAAhD,EAAyD;AACrD,MAAI,CAAC3C,UAAU,CAAC0H,gBAAX,CAA4BpI,KAA5B,EAAmCqD,OAAnC,CAAL,EAAkD;AAC9CyE,IAAAA,oBAAoB,CAACC,GAAD,EAAM/H,KAAN;AAAa;AAAmB,QAAhC,CAApB;AACH;AACJ;AACD;;;;;;;;;;;;;AAWA,SAASsD,kBAAT,CAA4ByE,GAA5B,EAAiC/H,KAAjC,EAAwCqD,OAAxC,EAAiD;AAC7C,MAAI,CAAC3C,UAAU,CAAC0H,gBAAX,CAA4BpI,KAA5B,EAAmCqD,OAAnC,CAAL,EAAkD;AAC9C,QAAI,CAAC5C,MAAM,CAAC4H,QAAP,CAAgBrI,KAAhB,CAAL,EAA6B;AACzB,YAAM,IAAI4B,KAAJ,CAAW,GAAElB,UAAU,CAACwH,sBAAX,CAAkCH,GAAlC,EAAuC,wBAAvC,CAAiE,0BAA9E,CAAN;AACH;;AACD,UAAMO,UAAU,GAAGtI,KAAnB;;AACA,QAAI,WAAWsI,UAAX,IAAyB,OAAOA,UAAU,CAAC9E,KAAlB,KAA4B,SAAzD,EAAoE;AAChE,YAAM,IAAI5B,KAAJ,CAAW,GAAElB,UAAU,CAACwH,sBAAX,CAAkCH,GAAlC,EAAuC,wBAAvC,CAAiE,4BAA9E,CAAN;AACH;;AACD,QAAI,iBAAiBO,UAArB,EAAiC;AAC7B,UAAI,CAACtB,KAAK,CAACC,OAAN,CAAcqB,UAAU,CAAC5E,WAAzB,CAAL,EAA4C;AACxC,cAAM,IAAI9B,KAAJ,CAAW,GAAElB,UAAU,CAACwH,sBAAX,CAAkCH,GAAlC,EAAuC,wBAAvC,CAAiE,iCAA9E,CAAN;AACH;;AACD,WAAK,IAAIlD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyD,UAAU,CAAC5E,WAAX,CAAuBhC,MAA3C,EAAmD,EAAEmD,CAArD,EAAwD;AACpD,YAAI;AACAxE,UAAAA,MAAM,CAAC0E,iBAAP,CAAyBF,CAAzB,EAA4ByD,UAAU,CAAC5E,WAAX,CAAuBmB,CAAvB,CAA5B;AACH,SAFD,CAGA,OAAOM,GAAP,EAAY;AACR,gBAAM,IAAIvD,KAAJ,CAAW,GAAElB,UAAU,CAACwH,sBAAX,CAAkCH,GAAlC,EAAuC,wBAAvC,CAAiE,gCAA+B5C,GAAG,CAACE,OAAQ,EAAzH,CAAN;AACH;AACJ;AACJ;;AACD,QAAI,WAAWiD,UAAX,IAAyB,iBAAiBA,UAA9C,EAA0D;AACtD,YAAM,IAAI1G,KAAJ,CAAW,GAAElB,UAAU,CAACwH,sBAAX,CAAkCH,GAAlC,EAAuC,wBAAvC,CAAiE,qDAA9E,CAAN;AACH;AACJ;AACJ;;AACDhI,OAAO,CAACuD,kBAAR,GAA6BA,kBAA7B;AACA;;;;;;;;;;AASA,SAASrB,oBAAT,CAA8B8F,GAA9B,EAAmCQ,GAAnC,EAAwCC,YAAxC,EAAsD;AAClD,MAAI,CAACjI,YAAY,CAACkI,aAAb,CAA2BF,GAA3B,CAAL,EAAsC;AAClC,UAAM,IAAI3G,KAAJ,CAAUlB,UAAU,CAACgI,mBAAX,CAA+BX,GAA/B,EAAoCQ,GAApC,CAAV,CAAN;AACH;;AACD,OAAK,MAAMI,IAAX,IAAmB9I,MAAM,CAAC2F,IAAP,CAAY+C,GAAZ,CAAnB,EAAqC;AACjChI,IAAAA,YAAY,CAACqI,iBAAb,CAA+Bb,GAA/B,EAAoCQ,GAAG,CAACI,IAAD,CAAvC,EAA+C,oBAA/C,EAAqE;AACjEH,MAAAA,YAAY,EAAEA,YAAY,GAAG,KAAH,GAAW,MAD4B;AAEjEK,MAAAA,eAAe,EAAE;AAFgD,KAArE,EAGG,IAAIxI,MAAM,CAACuE,SAAX,CAAqB+D,IAArB,CAHH;AAIH;AACJ;;AACD5I,OAAO,CAACkC,oBAAR,GAA+BA,oBAA/B;AACA;;;;;;;;;AAQA,SAASiD,kBAAT,CAA4B6C,GAA5B,EAAiCe,GAAjC,EAAsCC,IAAtC,EAA4C;AACxCxI,EAAAA,YAAY,CAACqI,iBAAb,CAA+Bb,GAA/B,EAAoCe,GAApC,EAAyC,iBAAzC,EAA4D;AAAEN,IAAAA,YAAY,EAAE,MAAhB;AAAwBK,IAAAA,eAAe,EAAE;AAAzC,GAA5D,EAA6GE,IAA7G;AACH;;AACDhJ,OAAO,CAACmF,kBAAR,GAA6BA,kBAA7B;AACA;;;;;;;;;AAQA,SAASS,2BAAT,CAAqCoC,GAArC,EAA0ChG,IAA1C,EAAgD;AAC5C,QAAMiC,MAAM,GAAG,EAAf;AACAjC,EAAAA,IAAI,CAAC0D,OAAL,CAAa,CAACzF,KAAD,EAAQ0F,GAAR,KAAgB;AACzB1B,IAAAA,MAAM,CAAClB,IAAP,CAAY4C,GAAZ;AACH,GAFD;AAGA1B,EAAAA,MAAM,CAACgF,IAAP,CAAY,CAACC,IAAD,EAAOC,KAAP,KAAiBD,IAAI,CAACE,SAAL,CAAeD,KAAf,CAA7B;;AACA,OAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,MAAM,CAACtC,MAA3B,EAAmC,EAAEmD,CAArC,EAAwC;AACpC,QAAIb,MAAM,CAACa,CAAC,GAAG,CAAL,CAAN,CAAcuE,UAAd,CAAyBpF,MAAM,CAACa,CAAD,CAA/B,CAAJ,EAAyC;AACrC,YAAM,IAAIjD,KAAJ,CAAW,GAAElB,UAAU,CAACwH,sBAAX,CAAkCH,GAAlC,EAAuC,YAAvC,CAAqD,WAAU/D,MAAM,CAACa,CAAC,GAAG,CAAL,CAAQ,iCAA1F,CAAN;AACH;AACJ;AACJ;AACD;;;;;;;;;;AAQA,SAASS,iBAAT,CAA2ByC,GAA3B,EAAgCQ,GAAhC,EAAqC;AACjC,MAAI,CAAChI,YAAY,CAACkI,aAAb,CAA2BF,GAA3B,CAAL,EAAsC;AAClC,UAAM,IAAI3G,KAAJ,CAAUlB,UAAU,CAACgI,mBAAX,CAA+BX,GAA/B,EAAoCQ,GAApC,CAAV,CAAN;AACH;;AACD,MAAI9G,OAAO,GAAG,IAAd;;AACA,MAAI8G,GAAJ,EAAS;AACL,SAAK,MAAMI,IAAX,IAAmB9I,MAAM,CAAC2F,IAAP,CAAY+C,GAAZ,CAAnB,EAAqC;AACjC9G,MAAAA,OAAO,GAAG,KAAV;AACAyD,MAAAA,kBAAkB,CAAC6C,GAAD,EAAMQ,GAAG,CAACI,IAAD,CAAT,EAAiB,IAAItI,MAAM,CAACuE,SAAX,CAAqB+D,IAArB,CAAjB,CAAlB;AACH;AACJ;;AACD,MAAIlH,OAAJ,EAAa;AACT,UAAM,IAAIG,KAAJ,CAAU,qCAAV,CAAN;AACH;AACJ","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst assert = require(\"assert\");\nconst document_1 = require(\"./document\");\nconst logger_1 = require(\"./logger\");\nconst path_1 = require(\"./path\");\nconst reference_1 = require(\"./reference\");\nconst serializer_1 = require(\"./serializer\");\nconst timestamp_1 = require(\"./timestamp\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\n/*!\n * Google Cloud Functions terminates idle connections after two minutes. After\n * longer periods of idleness, we issue transactional commits to allow for\n * retries.\n */\nconst GCF_IDLE_TIMEOUT_MS = 110 * 1000;\n/**\n * A WriteResult wraps the write time set by the Firestore servers on sets(),\n * updates(), and creates().\n *\n * @class\n */\nclass WriteResult {\n    /**\n     * @hideconstructor\n     *\n     * @param _writeTime The time of the corresponding document write.\n     */\n    constructor(_writeTime) {\n        this._writeTime = _writeTime;\n    }\n    /**\n     * The write time as set by the Firestore servers.\n     *\n     * @type {Timestamp}\n     * @name WriteResult#writeTime\n     * @readonly\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({foo: 'bar'}).then(writeResult => {\n     *   console.log(`Document written at: ${writeResult.writeTime.toDate()}`);\n     * });\n     */\n    get writeTime() {\n        return this._writeTime;\n    }\n    /**\n     * Returns true if this `WriteResult` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return true if this `WriteResult` is equal to the provided value.\n     */\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof WriteResult &&\n                this._writeTime.isEqual(other._writeTime)));\n    }\n}\nexports.WriteResult = WriteResult;\n/**\n * A Firestore WriteBatch that can be used to atomically commit multiple write\n * operations at once.\n *\n * @class\n */\nclass WriteBatch {\n    /**\n     * @hideconstructor\n     *\n     * @param firestore The Firestore Database client.\n     */\n    constructor(firestore) {\n        /**\n         * An array of write operations that are executed as part of the commit. The\n         * resulting `api.IWrite` will be sent to the backend.\n         * @private\n         */\n        this._ops = [];\n        this._committed = false;\n        this._firestore = firestore;\n        this._serializer = new serializer_1.Serializer(firestore);\n    }\n    /**\n     * Checks if this write batch has any pending operations.\n     *\n     * @private\n     */\n    get isEmpty() {\n        return this._ops.length === 0;\n    }\n    /**\n     * Throws an error if this batch has already been committed.\n     *\n     * @private\n     */\n    verifyNotCommitted() {\n        if (this._committed) {\n            throw new Error('Cannot modify a WriteBatch that has been committed.');\n        }\n    }\n    /**\n     * Create a document with the provided object values. This will fail the batch\n     * if a document exists at its location.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * created.\n     * @param {DocumentData} data The object to serialize as the document.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * writeBatch.create(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n    create(documentRef, data) {\n        reference_1.validateDocumentReference('documentRef', documentRef);\n        validateDocumentData('data', data, /* allowDeletes= */ false);\n        this.verifyNotCommitted();\n        const transform = document_1.DocumentTransform.fromObject(documentRef, data);\n        transform.validate();\n        const precondition = new document_1.Precondition({ exists: false });\n        const op = () => {\n            const document = document_1.DocumentSnapshot.fromObject(documentRef, data);\n            const write = !document.isEmpty || transform.isEmpty ? document.toProto() : null;\n            return {\n                write,\n                transform: transform.toProto(this._serializer),\n                precondition: precondition.toProto(),\n            };\n        };\n        this._ops.push(op);\n        return this;\n    }\n    /**\n     * Deletes a document from the database.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * deleted.\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the batch if the\n     * document doesn't exist or was last updated at a different time.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.delete(documentRef);\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n    delete(documentRef, precondition) {\n        reference_1.validateDocumentReference('documentRef', documentRef);\n        validateDeletePrecondition('precondition', precondition, { optional: true });\n        this.verifyNotCommitted();\n        const conditions = new document_1.Precondition(precondition);\n        const op = () => {\n            return {\n                write: {\n                    delete: documentRef.formattedName,\n                },\n                precondition: conditions.toProto(),\n            };\n        };\n        this._ops.push(op);\n        return this;\n    }\n    /**\n     * Write to the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}.\n     * If the document does not exist yet, it will be created. If you pass\n     * [SetOptions]{@link SetOptions}., the provided data can be merged\n     * into the existing document.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * set.\n     * @param {DocumentData} data The object to serialize as the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge - If true, set() merges the values\n     * specified in its data argument. Fields omitted from this set() call\n     * remain untouched.\n     * @param {Array.<string|FieldPath>=} options.mergeFields - If provided,\n     * set() only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.set(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n    set(documentRef, data, options) {\n        validateSetOptions('options', options, { optional: true });\n        const mergeLeaves = options && options.merge === true;\n        const mergePaths = options && options.mergeFields;\n        reference_1.validateDocumentReference('documentRef', documentRef);\n        validateDocumentData('data', data, \n        /* allowDeletes= */ !!(mergePaths || mergeLeaves));\n        this.verifyNotCommitted();\n        let documentMask;\n        if (mergePaths) {\n            documentMask = document_1.DocumentMask.fromFieldMask(options.mergeFields);\n            data = documentMask.applyTo(data);\n        }\n        const transform = document_1.DocumentTransform.fromObject(documentRef, data);\n        transform.validate();\n        const op = () => {\n            const document = document_1.DocumentSnapshot.fromObject(documentRef, data);\n            if (mergePaths) {\n                documentMask.removeFields(transform.fields);\n            }\n            else {\n                documentMask = document_1.DocumentMask.fromObject(data);\n            }\n            const hasDocumentData = !document.isEmpty || !documentMask.isEmpty;\n            let write;\n            if (!mergePaths && !mergeLeaves) {\n                write = document.toProto();\n            }\n            else if (hasDocumentData || transform.isEmpty) {\n                write = document.toProto();\n                write.updateMask = documentMask.toProto();\n            }\n            return {\n                write,\n                transform: transform.toProto(this._serializer),\n            };\n        };\n        this._ops.push(op);\n        return this;\n    }\n    /**\n     * Update fields of the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document\n     * doesn't yet exist, the update fails and the entire batch will be rejected.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values. Nested fields can be\n     * updated by providing dot-separated field path strings or by providing\n     * FieldPath objects.\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * updated.\n     * @param {UpdateData|string|FieldPath} dataOrField An object\n     * containing the fields and values with which to update the document\n     * or the path of the first field to update.\n     * @param {\n     * ...(Precondition|*|string|FieldPath)} preconditionOrValues -\n     * An alternating list of field paths and values to update or a Precondition\n     * to restrict this update.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.update(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n    update(documentRef, dataOrField, ...preconditionOrValues) {\n        validate_1.validateMinNumberOfArguments('WriteBatch.update', arguments, 2);\n        reference_1.validateDocumentReference('documentRef', documentRef);\n        this.verifyNotCommitted();\n        const updateMap = new Map();\n        let precondition = new document_1.Precondition({ exists: true });\n        const argumentError = 'Update() requires either a single JavaScript ' +\n            'object or an alternating list of field/value pairs that can be ' +\n            'followed by an optional precondition.';\n        const usesVarargs = typeof dataOrField === 'string' || dataOrField instanceof path_1.FieldPath;\n        if (usesVarargs) {\n            try {\n                for (let i = 1; i < arguments.length; i += 2) {\n                    if (i === arguments.length - 1) {\n                        validateUpdatePrecondition(i, arguments[i]);\n                        precondition = new document_1.Precondition(arguments[i]);\n                    }\n                    else {\n                        path_1.validateFieldPath(i, arguments[i]);\n                        // Unlike the `validateMinNumberOfArguments` invocation above, this\n                        // validation can be triggered both from `WriteBatch.update()` and\n                        // `DocumentReference.update()`. Hence, we don't use the fully\n                        // qualified API name in the error message.\n                        validate_1.validateMinNumberOfArguments('update', arguments, i + 1);\n                        const fieldPath = path_1.FieldPath.fromArgument(arguments[i]);\n                        validateFieldValue(i, arguments[i + 1], fieldPath);\n                        updateMap.set(fieldPath, arguments[i + 1]);\n                    }\n                }\n            }\n            catch (err) {\n                logger_1.logger('WriteBatch.update', null, 'Varargs validation failed:', err);\n                // We catch the validation error here and re-throw to provide a better\n                // error message.\n                throw new Error(`${argumentError} ${err.message}`);\n            }\n        }\n        else {\n            try {\n                validateUpdateMap('dataOrField', dataOrField);\n                validate_1.validateMaxNumberOfArguments('update', arguments, 3);\n                const data = dataOrField;\n                Object.keys(data).forEach(key => {\n                    path_1.validateFieldPath(key, key);\n                    updateMap.set(path_1.FieldPath.fromArgument(key), data[key]);\n                });\n                if (preconditionOrValues.length > 0) {\n                    validateUpdatePrecondition('preconditionOrValues', preconditionOrValues[0]);\n                    precondition = new document_1.Precondition(preconditionOrValues[0]);\n                }\n            }\n            catch (err) {\n                logger_1.logger('WriteBatch.update', null, 'Non-varargs validation failed:', err);\n                // We catch the validation error here and prefix the error with a custom\n                // message to describe the usage of update() better.\n                throw new Error(`${argumentError} ${err.message}`);\n            }\n        }\n        validateNoConflictingFields('dataOrField', updateMap);\n        const transform = document_1.DocumentTransform.fromUpdateMap(documentRef, updateMap);\n        transform.validate();\n        const documentMask = document_1.DocumentMask.fromUpdateMap(updateMap);\n        const op = () => {\n            const document = document_1.DocumentSnapshot.fromUpdateMap(documentRef, updateMap);\n            let write = null;\n            if (!document.isEmpty || !documentMask.isEmpty) {\n                write = document.toProto();\n                write.updateMask = documentMask.toProto();\n            }\n            return {\n                write,\n                transform: transform.toProto(this._serializer),\n                precondition: precondition.toProto(),\n            };\n        };\n        this._ops.push(op);\n        return this;\n    }\n    /**\n     * Atomically commits all pending operations to the database and verifies all\n     * preconditions. Fails the entire write if any precondition is not met.\n     *\n     * @returns {Promise.<Array.<WriteResult>>} A Promise that resolves\n     * when this batch completes.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.set(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n    commit() {\n        return this.commit_();\n    }\n    /**\n     * Commit method that takes an optional transaction ID.\n     *\n     * @private\n     * @param commitOptions Options to use for this commit.\n     * @param commitOptions.transactionId The transaction ID of this commit.\n     * @param commitOptions.requestTag A unique client-assigned identifier for\n     * this request.\n     * @returns  A Promise that resolves when this batch completes.\n     */\n    async commit_(commitOptions) {\n        // Note: We don't call `verifyNotCommitted()` to allow for retries.\n        this._committed = true;\n        const tag = (commitOptions && commitOptions.requestTag) || util_1.requestTag();\n        await this._firestore.initializeIfNeeded(tag);\n        const database = this._firestore.formattedName;\n        const request = { database };\n        // On GCF, we periodically force transactional commits to allow for\n        // request retries in case GCF closes our backend connection.\n        const explicitTransaction = commitOptions && commitOptions.transactionId;\n        if (!explicitTransaction && this._shouldCreateTransaction()) {\n            logger_1.logger('WriteBatch.commit', tag, 'Using transaction for commit');\n            return this._firestore\n                .request('beginTransaction', request, tag, true)\n                .then(resp => {\n                return this.commit_({ transactionId: resp.transaction });\n            });\n        }\n        const writes = this._ops.map(op => op());\n        request.writes = [];\n        for (const req of writes) {\n            assert(req.write || req.transform, 'Either a write or transform must be set');\n            if (req.precondition) {\n                (req.write || req.transform).currentDocument = req.precondition;\n            }\n            if (req.write) {\n                request.writes.push(req.write);\n            }\n            if (req.transform) {\n                request.writes.push(req.transform);\n            }\n        }\n        logger_1.logger('WriteBatch.commit', tag, 'Sending %d writes', request.writes.length);\n        if (explicitTransaction) {\n            request.transaction = explicitTransaction;\n        }\n        return this._firestore\n            .request('commit', request, tag, \n        /* allowRetries= */ false)\n            .then(resp => {\n            const writeResults = [];\n            if (request.writes.length > 0) {\n                assert(Array.isArray(resp.writeResults) &&\n                    request.writes.length === resp.writeResults.length, `Expected one write result per operation, but got ${resp.writeResults.length} results for ${request.writes.length} operations.`);\n                const commitTime = timestamp_1.Timestamp.fromProto(resp.commitTime);\n                let offset = 0;\n                for (let i = 0; i < writes.length; ++i) {\n                    const writeRequest = writes[i];\n                    // Don't return two write results for a write that contains a\n                    // transform, as the fact that we have to split one write\n                    // operation into two distinct write requests is an implementation\n                    // detail.\n                    if (writeRequest.write && writeRequest.transform) {\n                        // The document transform is always sent last and produces the\n                        // latest update time.\n                        ++offset;\n                    }\n                    const writeResult = resp.writeResults[i + offset];\n                    writeResults.push(new WriteResult(writeResult.updateTime\n                        ? timestamp_1.Timestamp.fromProto(writeResult.updateTime)\n                        : commitTime));\n                }\n            }\n            return writeResults;\n        });\n    }\n    /**\n     * Determines whether we should issue a transactional commit. On GCF, this\n     * happens after two minutes of idleness.\n     *\n     * @private\n     * @returns Whether to use a transaction.\n     */\n    _shouldCreateTransaction() {\n        if (!this._firestore._preferTransactions) {\n            return false;\n        }\n        if (this._firestore._lastSuccessfulRequest) {\n            const now = new Date().getTime();\n            return now - this._firestore._lastSuccessfulRequest > GCF_IDLE_TIMEOUT_MS;\n        }\n        return true;\n    }\n}\nexports.WriteBatch = WriteBatch;\n/**\n * Validates the use of 'value' as a Precondition and enforces that 'exists'\n * and 'lastUpdateTime' use valid types.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate\n * @param allowExists Whether to allow the 'exists' preconditions.\n */\nfunction validatePrecondition(arg, value, allowExists) {\n    if (typeof value !== 'object' || value === null) {\n        throw new Error('Input is not an object.');\n    }\n    const precondition = value;\n    let conditions = 0;\n    if (precondition.exists !== undefined) {\n        ++conditions;\n        if (!allowExists) {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, 'precondition')} \"exists\" is not an allowed precondition.`);\n        }\n        if (typeof precondition.exists !== 'boolean') {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, 'precondition')} \"exists\" is not a boolean.'`);\n        }\n    }\n    if (precondition.lastUpdateTime !== undefined) {\n        ++conditions;\n        if (!(precondition.lastUpdateTime instanceof timestamp_1.Timestamp)) {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, 'precondition')} \"lastUpdateTime\" is not a Firestore Timestamp.`);\n        }\n    }\n    if (conditions > 1) {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'precondition')} Input specifies more than one precondition.`);\n    }\n}\n/**\n * Validates the use of 'value' as an update Precondition.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n */\nfunction validateUpdatePrecondition(arg, value, options) {\n    if (!validate_1.validateOptional(value, options)) {\n        validatePrecondition(arg, value, /* allowExists= */ false);\n    }\n}\n/**\n * Validates the use of 'value' as a delete Precondition.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n */\nfunction validateDeletePrecondition(arg, value, options) {\n    if (!validate_1.validateOptional(value, options)) {\n        validatePrecondition(arg, value, /* allowExists= */ true);\n    }\n}\n/**\n * Validates the use of 'value' as SetOptions and enforces that 'merge' is a\n * boolean.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n * @throws if the input is not a valid SetOptions object.\n */\nfunction validateSetOptions(arg, value, options) {\n    if (!validate_1.validateOptional(value, options)) {\n        if (!util_1.isObject(value)) {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, 'set() options argument')} Input is not an object.`);\n        }\n        const setOptions = value;\n        if ('merge' in setOptions && typeof setOptions.merge !== 'boolean') {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, 'set() options argument')} \"merge\" is not a boolean.`);\n        }\n        if ('mergeFields' in setOptions) {\n            if (!Array.isArray(setOptions.mergeFields)) {\n                throw new Error(`${validate_1.invalidArgumentMessage(arg, 'set() options argument')} \"mergeFields\" is not an array.`);\n            }\n            for (let i = 0; i < setOptions.mergeFields.length; ++i) {\n                try {\n                    path_1.validateFieldPath(i, setOptions.mergeFields[i]);\n                }\n                catch (err) {\n                    throw new Error(`${validate_1.invalidArgumentMessage(arg, 'set() options argument')} \"mergeFields\" is not valid: ${err.message}`);\n                }\n            }\n        }\n        if ('merge' in setOptions && 'mergeFields' in setOptions) {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, 'set() options argument')} You cannot specify both \"merge\" and \"mergeFields\".`);\n        }\n    }\n}\nexports.validateSetOptions = validateSetOptions;\n/**\n * Validates a JavaScript object for usage as a Firestore document.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param obj JavaScript object to validate.\n * @param allowDeletes Whether to allow FieldValue.delete() sentinels.\n * @throws when the object is invalid.\n */\nfunction validateDocumentData(arg, obj, allowDeletes) {\n    if (!serializer_1.isPlainObject(obj)) {\n        throw new Error(validate_1.customObjectMessage(arg, obj));\n    }\n    for (const prop of Object.keys(obj)) {\n        serializer_1.validateUserInput(arg, obj[prop], 'Firestore document', {\n            allowDeletes: allowDeletes ? 'all' : 'none',\n            allowTransforms: true,\n        }, new path_1.FieldPath(prop));\n    }\n}\nexports.validateDocumentData = validateDocumentData;\n/**\n * Validates that a value can be used as field value during an update.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param val The value to verify.\n * @param path The path to show in the error message.\n */\nfunction validateFieldValue(arg, val, path) {\n    serializer_1.validateUserInput(arg, val, 'Firestore value', { allowDeletes: 'root', allowTransforms: true }, path);\n}\nexports.validateFieldValue = validateFieldValue;\n/**\n * Validates that the update data does not contain any ambiguous field\n * definitions (such as 'a.b' and 'a').\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param data An update map with field/value pairs.\n */\nfunction validateNoConflictingFields(arg, data) {\n    const fields = [];\n    data.forEach((value, key) => {\n        fields.push(key);\n    });\n    fields.sort((left, right) => left.compareTo(right));\n    for (let i = 1; i < fields.length; ++i) {\n        if (fields[i - 1].isPrefixOf(fields[i])) {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, 'update map')} Field \"${fields[i - 1]}\" was specified multiple times.`);\n        }\n    }\n}\n/**\n * Validates that a JavaScript object is a map of field paths to field values.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param obj JavaScript object to validate.\n * @throws when the object is invalid.\n */\nfunction validateUpdateMap(arg, obj) {\n    if (!serializer_1.isPlainObject(obj)) {\n        throw new Error(validate_1.customObjectMessage(arg, obj));\n    }\n    let isEmpty = true;\n    if (obj) {\n        for (const prop of Object.keys(obj)) {\n            isEmpty = false;\n            validateFieldValue(arg, obj[prop], new path_1.FieldPath(prop));\n        }\n    }\n    if (isEmpty) {\n        throw new Error('At least one field must be updated.');\n    }\n}\n//# sourceMappingURL=write-batch.js.map"]},"metadata":{},"sourceType":"script"}