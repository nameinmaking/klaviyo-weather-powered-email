{"ast":null,"code":"/*! firebase-admin v8.8.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../utils/error\");\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar validator = require(\"../utils/validator\");\n/** Firebase IID backend host. */\n\n\nvar FIREBASE_IID_HOST = 'console.firebase.google.com';\n/** Firebase IID backend path. */\n\nvar FIREBASE_IID_PATH = '/v1/';\n/** Firebase IID request timeout duration in milliseconds. */\n\nvar FIREBASE_IID_TIMEOUT = 10000;\n/** HTTP error codes raised by the backend server. */\n\nvar ERROR_CODES = {\n  400: 'Malformed instance ID argument.',\n  401: 'Request not authorized.',\n  403: 'Project does not match instance ID or the client does not have sufficient privileges.',\n  404: 'Failed to find the instance ID.',\n  409: 'Already deleted.',\n  429: 'Request throttled out by the backend server.',\n  500: 'Internal server error.',\n  503: 'Backend servers are over capacity. Try again later.'\n};\n/**\n * Class that provides mechanism to send requests to the Firebase Instance ID backend endpoints.\n */\n\nvar FirebaseInstanceIdRequestHandler =\n/** @class */\nfunction () {\n  /**\n   * @param {FirebaseApp} app The app used to fetch access tokens to sign API requests.\n   * @param {string} projectId A Firebase project ID string.\n   *\n   * @constructor\n   */\n  function FirebaseInstanceIdRequestHandler(app, projectId) {\n    this.host = FIREBASE_IID_HOST;\n    this.timeout = FIREBASE_IID_TIMEOUT;\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    this.path = FIREBASE_IID_PATH + (\"project/\" + projectId + \"/instanceId/\");\n  }\n\n  FirebaseInstanceIdRequestHandler.prototype.deleteInstanceId = function (instanceId) {\n    if (!validator.isNonEmptyString(instanceId)) {\n      return Promise.reject(new error_1.FirebaseInstanceIdError(error_1.InstanceIdClientErrorCode.INVALID_INSTANCE_ID, 'Instance ID must be a non-empty string.'));\n    }\n\n    return this.invokeRequestHandler(new api_request_1.ApiSettings(instanceId, 'DELETE'));\n  };\n  /**\n   * Invokes the request handler based on the API settings object passed.\n   *\n   * @param {ApiSettings} apiSettings The API endpoint settings to apply to request and response.\n   * @return {Promise<object>} A promise that resolves with the response.\n   */\n\n\n  FirebaseInstanceIdRequestHandler.prototype.invokeRequestHandler = function (apiSettings) {\n    var _this = this;\n\n    var path = this.path + apiSettings.getEndpoint();\n    return Promise.resolve().then(function () {\n      var req = {\n        url: \"https://\" + _this.host + path,\n        method: apiSettings.getHttpMethod(),\n        timeout: _this.timeout\n      };\n      return _this.httpClient.send(req);\n    }).then(function (response) {\n      return response.data;\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        var response = err.response;\n        var errorMessage = response.isJson() && 'error' in response.data ? response.data.error : response.text;\n        var template = ERROR_CODES[response.status];\n        var message = template ? \"Instance ID \\\"\" + apiSettings.getEndpoint() + \"\\\": \" + template : errorMessage;\n        throw new error_1.FirebaseInstanceIdError(error_1.InstanceIdClientErrorCode.API_ERROR, message);\n      } // In case of timeouts and other network errors, the HttpClient returns a\n      // FirebaseError wrapped in the response. Simply throw it here.\n\n\n      throw err;\n    });\n  };\n\n  return FirebaseInstanceIdRequestHandler;\n}();\n\nexports.FirebaseInstanceIdRequestHandler = FirebaseInstanceIdRequestHandler;","map":{"version":3,"sources":["/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/firebase-admin/lib/instance-id/instance-id-request.js"],"names":["Object","defineProperty","exports","value","error_1","require","api_request_1","validator","FIREBASE_IID_HOST","FIREBASE_IID_PATH","FIREBASE_IID_TIMEOUT","ERROR_CODES","FirebaseInstanceIdRequestHandler","app","projectId","host","timeout","httpClient","AuthorizedHttpClient","path","prototype","deleteInstanceId","instanceId","isNonEmptyString","Promise","reject","FirebaseInstanceIdError","InstanceIdClientErrorCode","INVALID_INSTANCE_ID","invokeRequestHandler","ApiSettings","apiSettings","_this","getEndpoint","resolve","then","req","url","method","getHttpMethod","send","response","data","catch","err","HttpError","errorMessage","isJson","error","text","template","status","message","API_ERROR"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.8.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar error_1 = require(\"../utils/error\");\nvar api_request_1 = require(\"../utils/api-request\");\nvar validator = require(\"../utils/validator\");\n/** Firebase IID backend host. */\nvar FIREBASE_IID_HOST = 'console.firebase.google.com';\n/** Firebase IID backend path. */\nvar FIREBASE_IID_PATH = '/v1/';\n/** Firebase IID request timeout duration in milliseconds. */\nvar FIREBASE_IID_TIMEOUT = 10000;\n/** HTTP error codes raised by the backend server. */\nvar ERROR_CODES = {\n    400: 'Malformed instance ID argument.',\n    401: 'Request not authorized.',\n    403: 'Project does not match instance ID or the client does not have sufficient privileges.',\n    404: 'Failed to find the instance ID.',\n    409: 'Already deleted.',\n    429: 'Request throttled out by the backend server.',\n    500: 'Internal server error.',\n    503: 'Backend servers are over capacity. Try again later.',\n};\n/**\n * Class that provides mechanism to send requests to the Firebase Instance ID backend endpoints.\n */\nvar FirebaseInstanceIdRequestHandler = /** @class */ (function () {\n    /**\n     * @param {FirebaseApp} app The app used to fetch access tokens to sign API requests.\n     * @param {string} projectId A Firebase project ID string.\n     *\n     * @constructor\n     */\n    function FirebaseInstanceIdRequestHandler(app, projectId) {\n        this.host = FIREBASE_IID_HOST;\n        this.timeout = FIREBASE_IID_TIMEOUT;\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n        this.path = FIREBASE_IID_PATH + (\"project/\" + projectId + \"/instanceId/\");\n    }\n    FirebaseInstanceIdRequestHandler.prototype.deleteInstanceId = function (instanceId) {\n        if (!validator.isNonEmptyString(instanceId)) {\n            return Promise.reject(new error_1.FirebaseInstanceIdError(error_1.InstanceIdClientErrorCode.INVALID_INSTANCE_ID, 'Instance ID must be a non-empty string.'));\n        }\n        return this.invokeRequestHandler(new api_request_1.ApiSettings(instanceId, 'DELETE'));\n    };\n    /**\n     * Invokes the request handler based on the API settings object passed.\n     *\n     * @param {ApiSettings} apiSettings The API endpoint settings to apply to request and response.\n     * @return {Promise<object>} A promise that resolves with the response.\n     */\n    FirebaseInstanceIdRequestHandler.prototype.invokeRequestHandler = function (apiSettings) {\n        var _this = this;\n        var path = this.path + apiSettings.getEndpoint();\n        return Promise.resolve()\n            .then(function () {\n            var req = {\n                url: \"https://\" + _this.host + path,\n                method: apiSettings.getHttpMethod(),\n                timeout: _this.timeout,\n            };\n            return _this.httpClient.send(req);\n        })\n            .then(function (response) {\n            return response.data;\n        })\n            .catch(function (err) {\n            if (err instanceof api_request_1.HttpError) {\n                var response = err.response;\n                var errorMessage = (response.isJson() && 'error' in response.data) ?\n                    response.data.error : response.text;\n                var template = ERROR_CODES[response.status];\n                var message = template ?\n                    \"Instance ID \\\"\" + apiSettings.getEndpoint() + \"\\\": \" + template : errorMessage;\n                throw new error_1.FirebaseInstanceIdError(error_1.InstanceIdClientErrorCode.API_ERROR, message);\n            }\n            // In case of timeouts and other network errors, the HttpClient returns a\n            // FirebaseError wrapped in the response. Simply throw it here.\n            throw err;\n        });\n    };\n    return FirebaseInstanceIdRequestHandler;\n}());\nexports.FirebaseInstanceIdRequestHandler = FirebaseInstanceIdRequestHandler;\n"]},"metadata":{},"sourceType":"script"}