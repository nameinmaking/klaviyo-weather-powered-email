{"ast":null,"code":"/*! firebase-admin v8.8.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../utils/error\");\n\nvar security_rules_utils_1 = require(\"./security-rules-utils\");\n\nvar validator = require(\"../utils/validator\");\n\nvar RULES_V1_API = 'https://firebaserules.googleapis.com/v1';\nvar FIREBASE_VERSION_HEADER = {\n  'X-Firebase-Client': 'fire-admin-node/8.8.0'\n};\n/**\n * Class that facilitates sending requests to the Firebase security rules backend API.\n *\n * @private\n */\n\nvar SecurityRulesApiClient =\n/** @class */\nfunction () {\n  function SecurityRulesApiClient(httpClient, projectId) {\n    this.httpClient = httpClient;\n\n    if (!validator.isNonNullObject(httpClient)) {\n      throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'HttpClient must be a non-null object.');\n    }\n\n    if (!validator.isNonEmptyString(projectId)) {\n      throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n    }\n\n    this.projectIdPrefix = \"projects/\" + projectId;\n    this.url = RULES_V1_API + \"/\" + this.projectIdPrefix;\n  }\n\n  SecurityRulesApiClient.prototype.getRuleset = function (name) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.getRulesetName(name);\n    }).then(function (rulesetName) {\n      return _this.getResource(rulesetName);\n    });\n  };\n\n  SecurityRulesApiClient.prototype.createRuleset = function (ruleset) {\n    if (!validator.isNonNullObject(ruleset) || !validator.isNonNullObject(ruleset.source) || !validator.isNonEmptyArray(ruleset.source.files)) {\n      var err = new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Invalid rules content.');\n      return Promise.reject(err);\n    }\n\n    for (var _i = 0, _a = ruleset.source.files; _i < _a.length; _i++) {\n      var rf = _a[_i];\n\n      if (!validator.isNonNullObject(rf) || !validator.isNonEmptyString(rf.name) || !validator.isNonEmptyString(rf.content)) {\n        var err = new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', \"Invalid rules file argument: \" + JSON.stringify(rf));\n        return Promise.reject(err);\n      }\n    }\n\n    var request = {\n      method: 'POST',\n      url: this.url + \"/rulesets\",\n      data: ruleset\n    };\n    return this.sendRequest(request);\n  };\n\n  SecurityRulesApiClient.prototype.deleteRuleset = function (name) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.getRulesetName(name);\n    }).then(function (rulesetName) {\n      var request = {\n        method: 'DELETE',\n        url: _this.url + \"/\" + rulesetName\n      };\n      return _this.sendRequest(request);\n    });\n  };\n\n  SecurityRulesApiClient.prototype.listRulesets = function (pageSize, pageToken) {\n    if (pageSize === void 0) {\n      pageSize = 100;\n    }\n\n    if (!validator.isNumber(pageSize)) {\n      var err = new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Invalid page size.');\n      return Promise.reject(err);\n    }\n\n    if (pageSize < 1 || pageSize > 100) {\n      var err = new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Page size must be between 1 and 100.');\n      return Promise.reject(err);\n    }\n\n    if (typeof pageToken !== 'undefined' && !validator.isNonEmptyString(pageToken)) {\n      var err = new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Next page token must be a non-empty string.');\n      return Promise.reject(err);\n    }\n\n    var data = {\n      pageSize: pageSize,\n      pageToken: pageToken\n    };\n\n    if (!pageToken) {\n      delete data.pageToken;\n    }\n\n    var request = {\n      method: 'GET',\n      url: this.url + \"/rulesets\",\n      data: data\n    };\n    return this.sendRequest(request);\n  };\n\n  SecurityRulesApiClient.prototype.getRelease = function (name) {\n    return this.getResource(\"releases/\" + name);\n  };\n\n  SecurityRulesApiClient.prototype.updateRelease = function (name, rulesetName) {\n    var data = {\n      release: this.getReleaseDescription(name, rulesetName)\n    };\n    var request = {\n      method: 'PATCH',\n      url: this.url + \"/releases/\" + name,\n      data: data\n    };\n    return this.sendRequest(request);\n  };\n  /**\n   * Gets the specified resource from the rules API. Resource names must be the short names without project\n   * ID prefix (e.g. `rulesets/ruleset-name`).\n   *\n   * @param {string} name Full qualified name of the resource to get.\n   * @returns {Promise<T>} A promise that fulfills with the resource.\n   */\n\n\n  SecurityRulesApiClient.prototype.getResource = function (name) {\n    var request = {\n      method: 'GET',\n      url: this.url + \"/\" + name\n    };\n    return this.sendRequest(request);\n  };\n\n  SecurityRulesApiClient.prototype.getReleaseDescription = function (name, rulesetName) {\n    return {\n      name: this.projectIdPrefix + \"/releases/\" + name,\n      rulesetName: this.projectIdPrefix + \"/\" + this.getRulesetName(rulesetName)\n    };\n  };\n\n  SecurityRulesApiClient.prototype.getRulesetName = function (name) {\n    if (!validator.isNonEmptyString(name)) {\n      throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Ruleset name must be a non-empty string.');\n    }\n\n    if (name.indexOf('/') !== -1) {\n      throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Ruleset name must not contain any \"/\" characters.');\n    }\n\n    return \"rulesets/\" + name;\n  };\n\n  SecurityRulesApiClient.prototype.sendRequest = function (request) {\n    var _this = this;\n\n    request.headers = FIREBASE_VERSION_HEADER;\n    return this.httpClient.send(request).then(function (resp) {\n      return resp.data;\n    }).catch(function (err) {\n      throw _this.toFirebaseError(err);\n    });\n  };\n\n  SecurityRulesApiClient.prototype.toFirebaseError = function (err) {\n    if (err instanceof error_1.PrefixedFirebaseError) {\n      return err;\n    }\n\n    var response = err.response;\n\n    if (!response.isJson()) {\n      return new security_rules_utils_1.FirebaseSecurityRulesError('unknown-error', \"Unexpected response with status: \" + response.status + \" and body: \" + response.text);\n    }\n\n    var error = response.data.error || {};\n    var code = ERROR_CODE_MAPPING[error.status] || 'unknown-error';\n    var message = error.message || \"Unknown server error: \" + response.text;\n    return new security_rules_utils_1.FirebaseSecurityRulesError(code, message);\n  };\n\n  return SecurityRulesApiClient;\n}();\n\nexports.SecurityRulesApiClient = SecurityRulesApiClient;\nvar ERROR_CODE_MAPPING = {\n  INVALID_ARGUMENT: 'invalid-argument',\n  NOT_FOUND: 'not-found',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  UNAUTHENTICATED: 'authentication-error',\n  UNKNOWN: 'unknown-error'\n};","map":{"version":3,"sources":["/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/firebase-admin/lib/security-rules/security-rules-api-client.js"],"names":["Object","defineProperty","exports","value","error_1","require","security_rules_utils_1","validator","RULES_V1_API","FIREBASE_VERSION_HEADER","SecurityRulesApiClient","httpClient","projectId","isNonNullObject","FirebaseSecurityRulesError","isNonEmptyString","projectIdPrefix","url","prototype","getRuleset","name","_this","Promise","resolve","then","getRulesetName","rulesetName","getResource","createRuleset","ruleset","source","isNonEmptyArray","files","err","reject","_i","_a","length","rf","content","JSON","stringify","request","method","data","sendRequest","deleteRuleset","listRulesets","pageSize","pageToken","isNumber","getRelease","updateRelease","release","getReleaseDescription","indexOf","headers","send","resp","catch","toFirebaseError","PrefixedFirebaseError","response","isJson","status","text","error","code","ERROR_CODE_MAPPING","message","INVALID_ARGUMENT","NOT_FOUND","RESOURCE_EXHAUSTED","UNAUTHENTICATED","UNKNOWN"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.8.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar error_1 = require(\"../utils/error\");\nvar security_rules_utils_1 = require(\"./security-rules-utils\");\nvar validator = require(\"../utils/validator\");\nvar RULES_V1_API = 'https://firebaserules.googleapis.com/v1';\nvar FIREBASE_VERSION_HEADER = {\n    'X-Firebase-Client': 'fire-admin-node/8.8.0',\n};\n/**\n * Class that facilitates sending requests to the Firebase security rules backend API.\n *\n * @private\n */\nvar SecurityRulesApiClient = /** @class */ (function () {\n    function SecurityRulesApiClient(httpClient, projectId) {\n        this.httpClient = httpClient;\n        if (!validator.isNonNullObject(httpClient)) {\n            throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'HttpClient must be a non-null object.');\n        }\n        if (!validator.isNonEmptyString(projectId)) {\n            throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\n                + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\n                + 'environment variable.');\n        }\n        this.projectIdPrefix = \"projects/\" + projectId;\n        this.url = RULES_V1_API + \"/\" + this.projectIdPrefix;\n    }\n    SecurityRulesApiClient.prototype.getRuleset = function (name) {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.getRulesetName(name);\n        })\n            .then(function (rulesetName) {\n            return _this.getResource(rulesetName);\n        });\n    };\n    SecurityRulesApiClient.prototype.createRuleset = function (ruleset) {\n        if (!validator.isNonNullObject(ruleset) ||\n            !validator.isNonNullObject(ruleset.source) ||\n            !validator.isNonEmptyArray(ruleset.source.files)) {\n            var err = new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Invalid rules content.');\n            return Promise.reject(err);\n        }\n        for (var _i = 0, _a = ruleset.source.files; _i < _a.length; _i++) {\n            var rf = _a[_i];\n            if (!validator.isNonNullObject(rf) ||\n                !validator.isNonEmptyString(rf.name) ||\n                !validator.isNonEmptyString(rf.content)) {\n                var err = new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', \"Invalid rules file argument: \" + JSON.stringify(rf));\n                return Promise.reject(err);\n            }\n        }\n        var request = {\n            method: 'POST',\n            url: this.url + \"/rulesets\",\n            data: ruleset,\n        };\n        return this.sendRequest(request);\n    };\n    SecurityRulesApiClient.prototype.deleteRuleset = function (name) {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.getRulesetName(name);\n        })\n            .then(function (rulesetName) {\n            var request = {\n                method: 'DELETE',\n                url: _this.url + \"/\" + rulesetName,\n            };\n            return _this.sendRequest(request);\n        });\n    };\n    SecurityRulesApiClient.prototype.listRulesets = function (pageSize, pageToken) {\n        if (pageSize === void 0) { pageSize = 100; }\n        if (!validator.isNumber(pageSize)) {\n            var err = new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Invalid page size.');\n            return Promise.reject(err);\n        }\n        if (pageSize < 1 || pageSize > 100) {\n            var err = new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Page size must be between 1 and 100.');\n            return Promise.reject(err);\n        }\n        if (typeof pageToken !== 'undefined' && !validator.isNonEmptyString(pageToken)) {\n            var err = new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Next page token must be a non-empty string.');\n            return Promise.reject(err);\n        }\n        var data = {\n            pageSize: pageSize,\n            pageToken: pageToken,\n        };\n        if (!pageToken) {\n            delete data.pageToken;\n        }\n        var request = {\n            method: 'GET',\n            url: this.url + \"/rulesets\",\n            data: data,\n        };\n        return this.sendRequest(request);\n    };\n    SecurityRulesApiClient.prototype.getRelease = function (name) {\n        return this.getResource(\"releases/\" + name);\n    };\n    SecurityRulesApiClient.prototype.updateRelease = function (name, rulesetName) {\n        var data = {\n            release: this.getReleaseDescription(name, rulesetName),\n        };\n        var request = {\n            method: 'PATCH',\n            url: this.url + \"/releases/\" + name,\n            data: data,\n        };\n        return this.sendRequest(request);\n    };\n    /**\n     * Gets the specified resource from the rules API. Resource names must be the short names without project\n     * ID prefix (e.g. `rulesets/ruleset-name`).\n     *\n     * @param {string} name Full qualified name of the resource to get.\n     * @returns {Promise<T>} A promise that fulfills with the resource.\n     */\n    SecurityRulesApiClient.prototype.getResource = function (name) {\n        var request = {\n            method: 'GET',\n            url: this.url + \"/\" + name,\n        };\n        return this.sendRequest(request);\n    };\n    SecurityRulesApiClient.prototype.getReleaseDescription = function (name, rulesetName) {\n        return {\n            name: this.projectIdPrefix + \"/releases/\" + name,\n            rulesetName: this.projectIdPrefix + \"/\" + this.getRulesetName(rulesetName),\n        };\n    };\n    SecurityRulesApiClient.prototype.getRulesetName = function (name) {\n        if (!validator.isNonEmptyString(name)) {\n            throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Ruleset name must be a non-empty string.');\n        }\n        if (name.indexOf('/') !== -1) {\n            throw new security_rules_utils_1.FirebaseSecurityRulesError('invalid-argument', 'Ruleset name must not contain any \"/\" characters.');\n        }\n        return \"rulesets/\" + name;\n    };\n    SecurityRulesApiClient.prototype.sendRequest = function (request) {\n        var _this = this;\n        request.headers = FIREBASE_VERSION_HEADER;\n        return this.httpClient.send(request)\n            .then(function (resp) {\n            return resp.data;\n        })\n            .catch(function (err) {\n            throw _this.toFirebaseError(err);\n        });\n    };\n    SecurityRulesApiClient.prototype.toFirebaseError = function (err) {\n        if (err instanceof error_1.PrefixedFirebaseError) {\n            return err;\n        }\n        var response = err.response;\n        if (!response.isJson()) {\n            return new security_rules_utils_1.FirebaseSecurityRulesError('unknown-error', \"Unexpected response with status: \" + response.status + \" and body: \" + response.text);\n        }\n        var error = response.data.error || {};\n        var code = ERROR_CODE_MAPPING[error.status] || 'unknown-error';\n        var message = error.message || \"Unknown server error: \" + response.text;\n        return new security_rules_utils_1.FirebaseSecurityRulesError(code, message);\n    };\n    return SecurityRulesApiClient;\n}());\nexports.SecurityRulesApiClient = SecurityRulesApiClient;\nvar ERROR_CODE_MAPPING = {\n    INVALID_ARGUMENT: 'invalid-argument',\n    NOT_FOUND: 'not-found',\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    UNAUTHENTICATED: 'authentication-error',\n    UNKNOWN: 'unknown-error',\n};\n"]},"metadata":{},"sourceType":"script"}