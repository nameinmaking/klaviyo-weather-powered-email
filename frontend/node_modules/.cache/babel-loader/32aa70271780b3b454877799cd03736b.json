{"ast":null,"code":"import _regeneratorRuntime from\"/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/@babel/runtime/regenerator\";import _classCallCheck from\"/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import data from'./cities';import Firebase from'firebase';import DB_CONFIG from'./Config';var App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);function App(props){var _this;_classCallCheck(this,App);_this=_possibleConstructorReturn(this,_getPrototypeOf(App).call(this,props));_this.writeUserData=function(){Firebase.database().ref(\"/\").set(_this.state);console.log(\"Data Saved!\");};_this.getUserData=function(){var ref=Firebase.database().ref(\"/\");ref.on(\"value\",function(snapshot){var state=snapshot.val();_this.setState(state);});};_this.selectHandleChange=function(event){var str=event.target.value;var match=str.split(',');_this.setState({city:match[0],longitude:match[1],latitude:match[2]});};Firebase.initializeApp(DB_CONFIG);_this.state={email:\"\",city:\"\",longitude:\"\",latitude:\"\"};_this.emailIsValid=_this.emailIsValid.bind(_assertThisInitialized(_this));_this.subscribeUser=_this.subscribeUser.bind(_assertThisInitialized(_this));return _this;}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){var dropdown=document.getElementById('dropdown');dropdown.length=0;var defaultOption=document.createElement('option');defaultOption.text='Choose City';dropdown.add(defaultOption);dropdown.selectedIndex=0;var option;for(var i=0;i<data.length;i++){option=document.createElement('option');option.text=data[i].city;option.value=[data[i].city,data[i].latitude,data[i].longitude];dropdown.add(option);}this.getUserData();}},{key:\"render\",value:function render(){return React.createElement(\"div\",null,React.createElement(\"div\",{className:\"form-label-group\"},React.createElement(\"div\",{className:\"dropdown show\"},React.createElement(\"select\",{className:\"form-control form-control-lg\",id:\"dropdown\",onChange:this.selectHandleChange,value:this.state.city}))),React.createElement(\"button\",{className:\"btn btn-lg btn-primary btn-block\",type:\"submit\",onClick:this.subscribeUser},\" Subscribe\"));}},{key:\"subscribeUser\",value:function subscribeUser(){var userData,details;return _regeneratorRuntime.async(function subscribeUser$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!document.getElementById(\"inputEmail\").value){_context.next=10;break;}console.log(\"here\");_context.next=4;return _regeneratorRuntime.awrap(this.setState({email:document.getElementById(\"inputEmail\").value}));case 4:userData={};userData.key=this.state.email;details={\"city\":this.state.city,\"longitude\":this.state.longitude,\"latitude\":this.state.latitude};userData.key.push(details);alert(JSON.stringify(userData));this.writeUserData();case 10:case\"end\":return _context.stop();}}},null,this);}},{key:\"emailIsValid\",value:function emailIsValid(email){return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);}}]);return App;}(React.Component);export default App;","map":{"version":3,"sources":["/home/strider/Desktop/github/klaviyo-weather-powered-email/frontend/src/App.js"],"names":["React","data","Firebase","DB_CONFIG","App","props","writeUserData","database","ref","set","state","console","log","getUserData","on","snapshot","val","setState","selectHandleChange","event","str","target","value","match","split","city","longitude","latitude","initializeApp","email","emailIsValid","bind","subscribeUser","dropdown","document","getElementById","length","defaultOption","createElement","text","add","selectedIndex","option","i","userData","key","details","push","alert","JSON","stringify","test","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport data from './cities';\nimport Firebase from 'firebase';\nimport DB_CONFIG from './Config';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        Firebase.initializeApp(DB_CONFIG);\n\n        this.state = {\n            email: \"\",\n            city: \"\",\n            longitude: \"\",\n            latitude: \"\"\n        };\n        this.emailIsValid = this.emailIsValid.bind(this);\n        this.subscribeUser = this.subscribeUser.bind(this);\n    }\n\n\n    writeUserData = () => {\n        Firebase.database()\n            .ref(\"/\")\n            .set(this.state);\n        console.log(\"Data Saved!\");\n    };\n\n    getUserData = () => {\n        let ref = Firebase.database().ref(\"/\");\n        ref.on(\"value\", snapshot => {\n            const state = snapshot.val();\n            this.setState(state);\n        });\n    };\n\n    componentDidMount() {\n        let dropdown = document.getElementById('dropdown');\n        dropdown.length = 0;\n\n        let defaultOption = document.createElement('option');\n        defaultOption.text = 'Choose City';\n\n        dropdown.add(defaultOption);\n        dropdown.selectedIndex = 0;\n\n        let option;\n\n        for (let i = 0; i < data.length; i++) {\n            option = document.createElement('option');\n            option.text = data[i].city;\n            option.value = [data[i].city, data[i].latitude, data[i].longitude];\n            dropdown.add(option);\n        }\n\n        this.getUserData();\n    }\n\n    render() {\n        return (\n            <div>\n\n                <div className=\"form-label-group\">\n                    <div className=\"dropdown show\">\n                        <select className=\"form-control form-control-lg\" id=\"dropdown\"\n                                onChange={this.selectHandleChange}\n                                value={this.state.city}\n                        >\n                        </select>\n                    </div>\n                </div>\n\n                <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\"\n                        onClick={this.subscribeUser}> Subscribe\n                </button>\n            </div>\n        );\n    }\n\n    async subscribeUser() {\n        if (document.getElementById(\"inputEmail\").value) {\n            console.log(\"here\");\n            await this.setState({email: document.getElementById(\"inputEmail\").value});\n            let userData = {};\n            userData.key = this.state.email;\n            let details = {\n                \"city\": this.state.city,\n                \"longitude\": this.state.longitude,\n                \"latitude\": this.state.latitude\n            };\n\n            userData.key.push(details);\n            alert(JSON.stringify(userData));\n            this.writeUserData();\n        }\n    }\n\n    emailIsValid(email) {\n        return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)\n    }\n\n    selectHandleChange = (event) => {\n        let str = event.target.value;\n        let match = str.split(',');\n        this.setState({city: match[0], longitude: match[1], latitude: match[2]});\n    };\n}\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}